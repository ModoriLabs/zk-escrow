{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.22;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC-1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    function __Pausable_init() internal onlyInitializing {\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\n\npragma solidity >=0.4.11;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.21;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This library provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\n */\nlibrary ERC1967Utils {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit IERC1967.Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit IERC1967.BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                revert(add(returndata, 0x20), mload(returndata))\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes memory signature\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly (\"memory-safe\") {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "src/Escrow.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.30;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport { IPaymentVerifierV2 } from \"./verifiers/interfaces/IPaymentVerifierV2.sol\";\nimport { IEscrow } from \"./interfaces/IEscrow.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IMintableERC20 } from \"./interfaces/IMintableERC20.sol\";\nimport { StringUtils } from \"./external/ReclaimStringUtils.sol\";\nimport { Uint256ArrayUtils } from \"./external/Uint256ArrayUtils.sol\";\n\ncontract Escrow is Ownable, Pausable, IEscrow {\n    using SafeERC20 for IERC20;\n    using Uint256ArrayUtils for uint256[];\n\n    string public chainName;\n    uint256 public intentCount;\n\n    // Mapping of address to intentHash (Only one intent per address at a given time)\n    mapping(address => uint256[]) public accountDeposits;\n    mapping(address => uint256) public accountIntent;\n\n    mapping(uint256 => Deposit) public deposits;\n    mapping(uint256 => Intent) public intents;\n    mapping(uint256 => address[]) public depositVerifiers;\n    mapping(uint256 depositId => mapping(address => DepositVerifierData)) public depositVerifierData;\n\n    // Mapping of depositId to verifier address to mapping of fiat currency to conversion rate. Each payment service can support\n    // multiple currencies. Depositor can specify list of currencies and conversion rates for each payment service.\n    // Example: Deposit 1 => Venmo => USD: 1e18\n    //                    => Revolut => USD: 1e18, EUR: 1.2e18, SGD: 1.5e18\n    mapping(uint256 depositId => mapping(address verifier => mapping(bytes32 fiatCurrency => uint256 conversionRate))) public depositCurrencyConversionRate;\n    mapping(uint256 depositId => mapping(address verifier => bytes32[] fiatCurrencies)) public depositCurrencies; // Handy mapping to get all currencies for a deposit and verifier\n\n    // Governance controlled\n    mapping(address => bool) public whitelistedPaymentVerifiers;      // Mapping of payment verifier addresses to boolean indicating if they are whitelisted\n\n    uint256 public intentExpirationPeriod;\n    uint256 public depositCounter;\n    uint256 public maxIntentsPerDeposit = 100;\n\n    constructor(\n        address _owner,\n        uint256 _intentExpirationPeriod,\n        string memory _chainName\n    ) Ownable(_owner) {\n        intentExpirationPeriod = _intentExpirationPeriod;\n        chainName = _chainName;\n    }\n\n    function signalIntent(\n        uint256 _depositId,\n        uint256 _amount,\n        address _to,\n        address _verifier,\n        bytes32 _fiatCurrency\n    ) external whenNotPaused {\n        Deposit storage deposit = deposits[_depositId];\n\n        _validateIntent(_depositId, deposit, _amount, _to, _verifier, _fiatCurrency);\n\n        uint256 intentId = ++intentCount;\n\n        if (deposit.remainingDeposits < _amount || deposit.intentIds.length >= maxIntentsPerDeposit) {\n            (uint256[] memory prunableIntents, uint256 reclaimableAmount) = _getPrunableIntents(_depositId);\n\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \"Not enough liquidity\");\n\n            // The require above means reclaimableAmount > 0, so we can prune intents\n            _pruneIntents(deposit, prunableIntents);\n            deposit.remainingDeposits += reclaimableAmount;\n            deposit.outstandingIntentAmount -= reclaimableAmount;\n\n            require(deposit.intentIds.length < maxIntentsPerDeposit, \"Maximum intents per deposit reached\");\n        }\n\n        uint256 conversionRate = depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency];\n        intents[intentId] = Intent({\n            owner: msg.sender,\n            to: _to,\n            depositId: _depositId,\n            amount: _amount,\n            paymentVerifier: _verifier,\n            fiatCurrency: _fiatCurrency,\n            conversionRate: conversionRate,\n            timestamp: block.timestamp\n        });\n\n        accountIntent[msg.sender] = intentId;\n\n        deposit.remainingDeposits -= _amount;\n        deposit.outstandingIntentAmount += _amount;\n        deposit.intentIds.push(intentId);\n\n        emit IntentSignaled(msg.sender, _to, _verifier, _amount, intentId, conversionRate);\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Allowed even when paused.\n     *\n     * @param _intentId    ID of intent being cancelled\n     */\n    function cancelIntent(uint256 _intentId) external {\n        Intent memory intent = intents[_intentId];\n        Deposit storage deposit = deposits[intent.depositId];\n        require(intent.owner == msg.sender, \"Sender must be the intent owner\");\n\n        _pruneIntent(deposit, _intentId);\n\n        deposit.remainingDeposits += intent.amount;\n        deposit.outstandingIntentAmount -= intent.amount;\n\n        emit IntentCancelled(_intentId, intent.owner);\n    }\n\n    function fulfillIntent(\n        bytes calldata _paymentProof,\n        uint256 _intentId\n    ) external whenNotPaused {\n        Intent memory intent = intents[_intentId];\n        Deposit storage deposit = deposits[intent.depositId];\n\n        address verifier = intent.paymentVerifier;\n        require(verifier != address(0), IntentNotFound());\n\n        DepositVerifierData memory verifierData = depositVerifierData[intent.depositId][verifier];\n        (bool success, bytes32 intentHash) = IPaymentVerifierV2(verifier).verifyPayment(\n            IPaymentVerifierV2.VerifyPaymentData({\n                paymentProof: _paymentProof,\n                depositToken: address(deposit.token),\n                intentAmount: intent.amount,\n                intentTimestamp: intent.timestamp,\n                payeeDetails: verifierData.payeeDetails,\n                fiatCurrency: intent.fiatCurrency,\n                conversionRate: intent.conversionRate,\n                data: verifierData.data\n            })\n        );\n        require(success, \"Payment verification failed\");\n\n        bytes32 expectedIntentHash = keccak256(abi.encode(string.concat(chainName, \"-\", StringUtils.uint2str(_intentId))));\n        require(expectedIntentHash == intentHash, \"Intent hash mismatch\");\n\n        _pruneIntent(deposit, _intentId);\n        deposit.outstandingIntentAmount -= intent.amount;\n        IERC20 token = deposit.token;\n\n        _transferFunds(IERC20(token), intent);\n\n        emit IntentFulfilled(\n            _intentId,\n            intent.depositId,\n            verifier,\n            intent.owner,\n            intent.to,\n            intent.amount\n        );\n    }\n\n    function createDeposit(\n        IERC20 _token,\n        uint256 _amount,\n        Range calldata _intentAmountRange,\n        address[] calldata _verifiers,\n        DepositVerifierData[] calldata _verifierData,\n        Currency[][] calldata _currencies\n    ) external whenNotPaused returns(uint256 depositId) {\n        _validateCreateDeposit(_amount, _intentAmountRange, _verifiers, _verifierData, _currencies);\n\n        depositId = ++depositCounter;\n        accountDeposits[msg.sender].push(depositId);\n\n        deposits[depositId] = Deposit({\n            depositor: msg.sender,\n            token: _token,\n            amount: _amount,\n            intentAmountRange: _intentAmountRange,\n            acceptingIntents: true,\n            intentIds: new uint256[](0),\n            remainingDeposits: _amount,\n            outstandingIntentAmount: 0\n        });\n\n        emit DepositCreated(depositId, msg.sender, _token, _amount, _intentAmountRange);\n\n        for (uint256 i = 0; i < _verifiers.length; i++) {\n            address verifier = _verifiers[i];\n            require(\n                bytes(depositVerifierData[depositId][verifier].payeeDetails).length == 0,\n                \"Verifier data already exists\"\n            );\n            depositVerifierData[depositId][verifier] = _verifierData[i];\n            depositVerifiers[depositId].push(verifier);\n\n            bytes32 payeeDetailsHash = keccak256(abi.encodePacked(_verifierData[i].payeeDetails));\n            emit DepositVerifierAdded(depositId, verifier, payeeDetailsHash);\n\n            for (uint256 j = 0; j < _currencies[i].length; j++) {\n                Currency memory currency = _currencies[i][j];\n                require(\n                    depositCurrencyConversionRate[depositId][verifier][currency.code] == 0,\n                    \"Currency conversion rate already exists\"\n                );\n                depositCurrencyConversionRate[depositId][verifier][currency.code] = currency.conversionRate;\n                depositCurrencies[depositId][verifier].push(currency.code);\n\n                emit DepositCurrencyAdded(depositId, verifier, currency.code, currency.conversionRate);\n            }\n        }\n\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\n    }\n\n    function releaseFundsToPayer(uint256 _intentId) external {\n        Intent memory intent = intents[_intentId];\n        Deposit storage deposit = deposits[intent.depositId];\n\n        require(intent.owner != address(0), \"Intent does not exist\");\n        require(deposit.depositor == msg.sender, OnlyDepositor());\n\n        _pruneIntent(deposit, _intentId);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        IERC20 token = deposit.token;\n\n        _transferFunds(token, intent);\n\n        emit IntentReleased(\n            _intentId,\n            intent.depositId,\n            intent.owner,\n            intent.to,\n            intent.amount\n        );\n    }\n\n    /**\n     * @notice Only callable by the depositor for a deposit. Allows depositor to update the conversion rate for a currency for a\n     * payment verifier. Since intent's store the conversion rate at the time of intent, changing the conversion rate will not affect\n     * any intents that have already been signaled.\n     */\n    function updateDepositConversionRate(\n        uint256 _depositId,\n        address _verifier,\n        bytes32 _fiatCurrency,\n        uint256 _newConversionRate\n    ) external whenNotPaused {\n        Deposit storage deposit = deposits[_depositId];\n        uint256 oldConversionRate = depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency];\n\n        require(deposit.depositor == msg.sender, OnlyDepositor());\n        require(oldConversionRate != 0, \"Currency or verifier not supported\");\n        require(_newConversionRate > 0, \"Conversion rate must be greater than 0\");\n\n        depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency] = _newConversionRate;\n\n        emit DepositConversionRateUpdated(_depositId, _verifier, _fiatCurrency, _newConversionRate);\n    }\n\n    /**\n     * @notice Allows the depositor to update the intent amount range for their deposit.\n     * This function can only be called by the original depositor of the deposit.\n     *\n     * @param _depositId The ID of the deposit to update\n     * @param _min The new minimum intent amount allowed\n     * @param _max The new maximum intent amount allowed\n     */\n    function updateDepositIntentAmountRange(uint256 _depositId, uint256 _min, uint256 _max) external whenNotPaused {\n        Deposit storage deposit = deposits[_depositId];\n\n        // This also ensures that the deposit exists\n        require(deposit.depositor == msg.sender, OnlyDepositor());\n        require(_min > 0 && _min <= _max && _max <= deposit.amount, InvalidIntentAmountRange());\n\n        Range memory oldRange = deposit.intentAmountRange;\n        deposit.intentAmountRange = Range({min: _min, max: _max});\n\n        emit DepositIntentAmountRangeUpdated(_depositId, oldRange, deposit.intentAmountRange);\n    }\n\n    /**\n     * @notice Only callable by the depositor for a deposit. Allows depositor to withdraw the remaining funds in the deposit.\n     * Deposit is marked as to not accept new intents and the funds locked due to intents can be withdrawn once they expire by calling this function\n     * again. Deposit will be deleted as long as there are no more outstanding intents.\n     *\n     * @param _depositId   DepositId the depositor is attempting to withdraw.\n     */\n    function withdrawDeposit(uint256 _depositId) external {\n        Deposit storage deposit = deposits[_depositId];\n\n        require(deposit.depositor == msg.sender, OnlyDepositor());\n\n        (\n            uint256[] memory prunableIntents,\n            uint256 reclaimableAmount\n        ) = _getPrunableIntents(_depositId);\n\n        _pruneIntents(deposit, prunableIntents);\n\n        uint256 returnAmount = deposit.remainingDeposits + reclaimableAmount;\n\n        deposit.outstandingIntentAmount -= reclaimableAmount;\n\n        emit DepositWithdrawn(_depositId, deposit.depositor, returnAmount);\n\n        delete deposit.remainingDeposits;\n        delete deposit.acceptingIntents;\n        IERC20 token = deposit.token; // store before deleting\n        _closeDepositIfNecessary(_depositId, deposit);\n\n        token.safeTransfer(msg.sender, returnAmount);\n    }\n\n    /**\n     * @notice Allows the depositor to add more funds to an existing deposit.\n     * The depositor must approve the escrow contract to transfer the additional amount.\n     *\n     * @param _depositId The ID of the deposit to increase\n     * @param _amount The additional amount to add to the deposit\n     */\n    function increaseDeposit(uint256 _depositId, uint256 _amount) external whenNotPaused {\n        Deposit storage deposit = deposits[_depositId];\n\n        require(deposit.depositor != address(0), DepositNotFound());\n        require(_amount > 0, InvalidAmount());\n\n        IERC20(deposit.token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        // Update deposit state\n        deposit.amount += _amount;\n        deposit.remainingDeposits += _amount;\n\n        emit DepositIncreased(_depositId, msg.sender, _amount, deposit.amount);\n    }\n\n    // *** Governance functions ***\n\n        /**\n     * @notice GOVERNANCE ONLY: Adds a payment verifier to the whitelist.\n     *\n     * @param _verifier   The payment verifier address to add\n     */\n    function addWhitelistedPaymentVerifier(address _verifier) external onlyOwner {\n        require(_verifier != address(0), \"Payment verifier cannot be zero address\");\n        require(!whitelistedPaymentVerifiers[_verifier], \"Payment verifier already whitelisted\");\n\n        whitelistedPaymentVerifiers[_verifier] = true;\n\n        emit PaymentVerifierAdded(_verifier);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Removes a payment verifier from the whitelist.\n     *\n     * @param _verifier   The payment verifier address to remove\n     */\n    function removeWhitelistedPaymentVerifier(address _verifier) external onlyOwner {\n        require(whitelistedPaymentVerifiers[_verifier], \"Payment verifier not whitelisted\");\n\n        whitelistedPaymentVerifiers[_verifier] = false;\n        emit PaymentVerifierRemoved(_verifier);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the maximum number of intents allowed per deposit.\n     *\n     * @param _maxIntentsPerDeposit The new maximum number of intents allowed per deposit\n     */\n    function setMaxIntentsPerDeposit(uint256 _maxIntentsPerDeposit) external onlyOwner {\n        require(_maxIntentsPerDeposit > 0, \"Max intents must be greater than 0\");\n        uint256 oldMax = maxIntentsPerDeposit;\n        maxIntentsPerDeposit = _maxIntentsPerDeposit;\n        emit MaxIntentsPerDepositUpdated(oldMax, _maxIntentsPerDeposit);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent\n     * locking up a depositor's funds.\n     *\n     * @param _intentExpirationPeriod   New intent expiration period\n     */\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\n        require(_intentExpirationPeriod != 0, \"Max intent expiration period cannot be zero\");\n\n        intentExpirationPeriod = _intentExpirationPeriod;\n        emit IntentExpirationPeriodSet(_intentExpirationPeriod);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    /* ============ External View Functions ============ */\n\n    // Getter functions for easier testing\n    function getDepositIntentIds(uint256 _depositId) external view returns (uint256[] memory) {\n        return deposits[_depositId].intentIds;\n    }\n\n    /* ============ Internal Functions ============ */\n    function _validateCreateDeposit(\n        uint256 _amount,\n        Range memory _intentAmountRange,\n        address[] calldata _verifiers,\n        DepositVerifierData[] calldata _verifierData,\n        Currency[][] calldata _currencies\n    ) internal view {\n        require(\n            _intentAmountRange.min != 0 &&\n            _intentAmountRange.min <= _intentAmountRange.max &&\n            _intentAmountRange.min <= _amount,\n            InvalidIntentAmountRange()\n        );\n        require(_verifiers.length > 0, \"Invalid verifiers\");\n        require(_verifiers.length == _verifierData.length, \"Invalid verifier data\");\n        require(_verifiers.length == _currencies.length, \"Invalid currencies length\");\n\n        for (uint256 i = 0; i < _verifiers.length; i++) {\n            address verifier = _verifiers[i];\n\n            require(verifier != address(0), \"Verifier cannot be zero address\");\n            require(whitelistedPaymentVerifiers[verifier], \"Payment verifier not whitelisted\");\n\n            // _verifierData.intentGatingService can be zero address, _verifierData.data can be empty\n            require(bytes(_verifierData[i].payeeDetails).length != 0, \"Payee details cannot be empty\");\n\n            for (uint256 j = 0; j < _currencies[i].length; j++) {\n                require(\n                    IPaymentVerifierV2(verifier).isCurrency(_currencies[i][j].code),\n                    \"Currency not supported by verifier\"\n                );\n                require(_currencies[i][j].conversionRate > 0, \"Conversion rate must be greater than 0\");\n            }\n        }\n    }\n\n    function _validateIntent(\n        uint256 _depositId,\n        Deposit storage _deposit,\n        uint256 _amount,\n        address _to,\n        address _verifier,\n        bytes32 _fiatCurrency\n    ) internal view {\n        require(accountIntent[msg.sender] == 0, IntentAlreadyExists());\n        require(_deposit.depositor != address(0), DepositNotFound());\n        require(_deposit.acceptingIntents, DepositNotAcceptingIntents());\n        require(_amount >= _deposit.intentAmountRange.min, InvalidAmount());\n        require(_amount <= _deposit.intentAmountRange.max, InvalidAmount());\n        require(_to != address(0), InvalidRecipient());\n\n        DepositVerifierData memory verifierData = depositVerifierData[_depositId][_verifier];\n        require(bytes(verifierData.payeeDetails).length != 0, \"Payment verifier not supported\");\n        require(depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency] != 0, \"Currency not supported\");\n    }\n\n    /**\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\n     * the outstanding amounts are summed and returned alongside the intentHashes\n     */\n    function _getPrunableIntents(\n        uint256 _depositId\n    )\n        internal\n        view\n        returns(uint256[] memory prunableIntents, uint256 reclaimedAmount)\n    {\n        uint256[] memory intentIds = deposits[_depositId].intentIds;\n        prunableIntents = new uint256[](intentIds.length);\n\n        for (uint256 i = 0; i < intentIds.length; ++i) {\n            Intent memory intent = intents[intentIds[i]];\n            if (intent.timestamp + intentExpirationPeriod < block.timestamp) {\n                prunableIntents[i] = intentIds[i];\n                reclaimedAmount += intent.amount;\n            }\n        }\n    }\n\n    function _pruneIntents(Deposit storage _deposit, uint256[] memory _intents) internal {\n        for (uint256 i = 0; i < _intents.length; ++i) {\n            if (_intents[i] != 0) {\n                _pruneIntent(_deposit, _intents[i]);\n            }\n        }\n    }\n\n    /**\n     * @notice Pruning an intent involves\n     * 1. deleting its state from the intents mapping\n     * 2. deleting the intent from it's owners intents array\n     * 3. deleting the intentHash from the deposit's intentHashes array.\n     */\n    function _pruneIntent(Deposit storage _deposit, uint256 _intentId) internal {\n        Intent memory intent = intents[_intentId];\n\n        delete accountIntent[intent.owner];\n        delete intents[_intentId];\n        _deposit.intentIds.removeStorage(_intentId);\n    }\n\n    /**\n     * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\n     * deposits mapping and removes tracking it in the user's accountDeposits mapping. Also deletes the verification data for the\n     * deposit.\n     */\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\n        if (openDepositAmount == 0) {\n            accountDeposits[_deposit.depositor].removeStorage(_depositId);\n            _deleteDepositVerifierAndCurrencyData(_depositId);\n            emit DepositClosed(_depositId, _deposit.depositor);\n            delete deposits[_depositId];\n        }\n    }\n\n    /**\n     * @notice Iterates through all verifiers for a deposit and deletes the corresponding verifier data and currencies.\n     */\n    function _deleteDepositVerifierAndCurrencyData(uint256 _depositId) internal {\n        address[] memory verifiers = depositVerifiers[_depositId];\n        for (uint256 i = 0; i < verifiers.length; i++) {\n            address verifier = verifiers[i];\n            delete depositVerifierData[_depositId][verifier];\n            bytes32[] memory currencies = depositCurrencies[_depositId][verifier];\n            for (uint256 j = 0; j < currencies.length; j++) {\n                delete depositCurrencyConversionRate[_depositId][verifier][currencies[j]];\n            }\n        }\n    }\n\n    // @dev the fee is not implemented in this version\n    function _transferFunds(IERC20 _token, Intent memory _intent) internal {\n        _token.safeTransfer(_intent.to, _intent.amount);\n    }\n}\n"
    },
    "src/EscrowUpgradeable.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.30;\n\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { PausableUpgradeable } from \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { UUPSUpgradeable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport { IPaymentVerifierV2 } from \"./verifiers/interfaces/IPaymentVerifierV2.sol\";\nimport { IEscrow } from \"./interfaces/IEscrow.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { IMintableERC20 } from \"./interfaces/IMintableERC20.sol\";\nimport { StringUtils } from \"./external/ReclaimStringUtils.sol\";\nimport { Uint256ArrayUtils } from \"./external/Uint256ArrayUtils.sol\";\n\ncontract EscrowUpgradeable is Initializable, OwnableUpgradeable, PausableUpgradeable, UUPSUpgradeable, IEscrow {\n    using SafeERC20 for IERC20;\n    using Uint256ArrayUtils for uint256[];\n\n    // keccak256(abi.encode(uint256(keccak256(\"modori.storage.escrow\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ESCROW_STORAGE_POSITION = 0x2240ec17ed99e18fb5366c392e47eb71a27b90b5d0e7350fd633d34acc81e900;\n\n    struct EscrowStorage {\n        string chainName;\n        uint256 intentCount;\n\n        // Mapping of address to intentHash (Only one intent per address at a given time)\n        mapping(address => uint256[]) accountDeposits;\n        mapping(address => uint256) accountIntent;\n\n        mapping(uint256 => Deposit) deposits;\n        mapping(uint256 => Intent) intents;\n        mapping(uint256 => address[]) depositVerifiers;\n        mapping(uint256 depositId => mapping(address => DepositVerifierData)) depositVerifierData;\n\n        // Mapping of depositId to verifier address to mapping of fiat currency to conversion rate. Each payment service can support\n        // multiple currencies. Depositor can specify list of currencies and conversion rates for each payment service.\n        // Example: Deposit 1 => Venmo => USD: 1e18\n        //                    => Revolut => USD: 1e18, EUR: 1.2e18, SGD: 1.5e18\n        mapping(uint256 depositId => mapping(address verifier => mapping(bytes32 fiatCurrency => uint256 conversionRate))) depositCurrencyConversionRate;\n        mapping(uint256 depositId => mapping(address verifier => bytes32[] fiatCurrencies)) depositCurrencies; // Handy mapping to get all currencies for a deposit and verifier\n\n        // Governance controlled\n        mapping(address => bool) whitelistedPaymentVerifiers;      // Mapping of payment verifier addresses to boolean indicating if they are whitelisted\n\n        uint256 intentExpirationPeriod;\n        uint256 depositCounter;\n        uint256 maxIntentsPerDeposit;\n    }\n\n    // slither-disable-next-line uninitialized-storage\n    function _getEscrowStorage() internal pure returns (EscrowStorage storage self) {\n        bytes32 slot = ESCROW_STORAGE_POSITION;\n\n        // slither-disable-next-line assembly\n        assembly {\n            self.slot := slot\n        }\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address _owner,\n        uint256 _intentExpirationPeriod,\n        string memory _chainName\n    ) public initializer {\n        __Ownable_init(_owner);\n        __Pausable_init();\n        __UUPSUpgradeable_init();\n\n        EscrowStorage storage s = _getEscrowStorage();\n        s.intentExpirationPeriod = _intentExpirationPeriod;\n        s.chainName = _chainName;\n        s.maxIntentsPerDeposit = 100;\n    }\n\n    // Public getter functions for storage variables\n    function chainName() public view returns (string memory) {\n        return _getEscrowStorage().chainName;\n    }\n\n    function intentCount() public view returns (uint256) {\n        return _getEscrowStorage().intentCount;\n    }\n\n    function accountDeposits(address account, uint256 index) public view returns (uint256) {\n        return _getEscrowStorage().accountDeposits[account][index];\n    }\n\n    function accountIntent(address account) public view returns (uint256) {\n        return _getEscrowStorage().accountIntent[account];\n    }\n\n    function deposits(uint256 depositId) public view returns (\n        address depositor,\n        IERC20 token,\n        uint256 amount,\n        Range memory intentAmountRange,\n        bool acceptingIntents,\n        uint256 remainingDeposits,\n        uint256 outstandingIntentAmount\n    ) {\n        Deposit storage deposit = _getEscrowStorage().deposits[depositId];\n        return (\n            deposit.depositor,\n            deposit.token,\n            deposit.amount,\n            deposit.intentAmountRange,\n            deposit.acceptingIntents,\n            deposit.remainingDeposits,\n            deposit.outstandingIntentAmount\n        );\n    }\n\n    function intents(uint256 intentId) public view returns (\n        address owner,\n        address to,\n        uint256 depositId,\n        uint256 amount,\n        uint256 timestamp,\n        address paymentVerifier,\n        bytes32 fiatCurrency,\n        uint256 conversionRate\n    ) {\n        Intent storage intent = _getEscrowStorage().intents[intentId];\n        return (\n            intent.owner,\n            intent.to,\n            intent.depositId,\n            intent.amount,\n            intent.timestamp,\n            intent.paymentVerifier,\n            intent.fiatCurrency,\n            intent.conversionRate\n        );\n    }\n\n    function depositVerifiers(uint256 depositId, uint256 index) public view returns (address) {\n        return _getEscrowStorage().depositVerifiers[depositId][index];\n    }\n\n    function depositVerifierData(uint256 depositId, address verifier) public view returns (DepositVerifierData memory) {\n        return _getEscrowStorage().depositVerifierData[depositId][verifier];\n    }\n\n    function depositCurrencyConversionRate(uint256 depositId, address verifier, bytes32 fiatCurrency) public view returns (uint256) {\n        return _getEscrowStorage().depositCurrencyConversionRate[depositId][verifier][fiatCurrency];\n    }\n\n    function depositCurrencies(uint256 depositId, address verifier, uint256 index) public view returns (bytes32) {\n        return _getEscrowStorage().depositCurrencies[depositId][verifier][index];\n    }\n\n    function whitelistedPaymentVerifiers(address verifier) public view returns (bool) {\n        return _getEscrowStorage().whitelistedPaymentVerifiers[verifier];\n    }\n\n    function intentExpirationPeriod() public view returns (uint256) {\n        return _getEscrowStorage().intentExpirationPeriod;\n    }\n\n    function depositCounter() public view returns (uint256) {\n        return _getEscrowStorage().depositCounter;\n    }\n\n    function maxIntentsPerDeposit() public view returns (uint256) {\n        return _getEscrowStorage().maxIntentsPerDeposit;\n    }\n\n    function signalIntent(\n        uint256 _depositId,\n        uint256 _amount,\n        address _to,\n        address _verifier,\n        bytes32 _fiatCurrency\n    ) external whenNotPaused {\n        EscrowStorage storage s = _getEscrowStorage();\n        Deposit storage deposit = s.deposits[_depositId];\n\n        _validateIntent(_depositId, deposit, _amount, _to, _verifier, _fiatCurrency);\n\n        uint256 intentId = ++s.intentCount;\n\n        if (deposit.remainingDeposits < _amount || deposit.intentIds.length >= s.maxIntentsPerDeposit) {\n            (uint256[] memory prunableIntents, uint256 reclaimableAmount) = _getPrunableIntents(_depositId);\n\n            require(deposit.remainingDeposits + reclaimableAmount >= _amount, \"Not enough liquidity\");\n\n            // The require above means reclaimableAmount > 0, so we can prune intents\n            _pruneIntents(deposit, prunableIntents);\n            deposit.remainingDeposits += reclaimableAmount;\n            deposit.outstandingIntentAmount -= reclaimableAmount;\n\n            require(deposit.intentIds.length < s.maxIntentsPerDeposit, \"Maximum intents per deposit reached\");\n        }\n\n        uint256 conversionRate = s.depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency];\n        s.intents[intentId] = Intent({\n            owner: msg.sender,\n            to: _to,\n            depositId: _depositId,\n            amount: _amount,\n            paymentVerifier: _verifier,\n            fiatCurrency: _fiatCurrency,\n            conversionRate: conversionRate,\n            timestamp: block.timestamp\n        });\n\n        s.accountIntent[msg.sender] = intentId;\n\n        deposit.remainingDeposits -= _amount;\n        deposit.outstandingIntentAmount += _amount;\n        deposit.intentIds.push(intentId);\n\n        emit IntentSignaled(msg.sender, _to, _verifier, _amount, intentId, conversionRate);\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Allowed even when paused.\n     *\n     * @param _intentId    ID of intent being cancelled\n     */\n    function cancelIntent(uint256 _intentId) external {\n        EscrowStorage storage s = _getEscrowStorage();\n        Intent memory intent = s.intents[_intentId];\n        Deposit storage deposit = s.deposits[intent.depositId];\n        require(intent.owner == msg.sender, OnlyIntentOwner());\n\n        _pruneIntent(deposit, _intentId);\n\n        deposit.remainingDeposits += intent.amount;\n        deposit.outstandingIntentAmount -= intent.amount;\n\n        emit IntentCancelled(_intentId, intent.owner);\n    }\n\n    function fulfillIntent(\n        bytes calldata _paymentProof,\n        uint256 _intentId\n    ) external whenNotPaused {\n        EscrowStorage storage s = _getEscrowStorage();\n        Intent memory intent = s.intents[_intentId];\n        Deposit storage deposit = s.deposits[intent.depositId];\n\n        address verifier = intent.paymentVerifier;\n        require(verifier != address(0), IntentNotFound());\n\n        DepositVerifierData memory verifierData = s.depositVerifierData[intent.depositId][verifier];\n        (bool success, bytes32 intentHash) = IPaymentVerifierV2(verifier).verifyPayment(\n            IPaymentVerifierV2.VerifyPaymentData({\n                paymentProof: _paymentProof,\n                depositToken: address(deposit.token),\n                intentAmount: intent.amount,\n                intentTimestamp: intent.timestamp,\n                payeeDetails: verifierData.payeeDetails,\n                fiatCurrency: intent.fiatCurrency,\n                conversionRate: intent.conversionRate,\n                data: verifierData.data\n            })\n        );\n        require(success, \"Payment verification failed\");\n\n        bytes32 expectedIntentHash = keccak256(abi.encode(string.concat(s.chainName, \"-\", StringUtils.uint2str(_intentId))));\n        require(expectedIntentHash == intentHash, \"Intent hash mismatch\");\n\n        _pruneIntent(deposit, _intentId);\n        deposit.outstandingIntentAmount -= intent.amount;\n        IERC20 token = deposit.token;\n\n        _transferFunds(IERC20(token), intent);\n\n        emit IntentFulfilled(\n            _intentId,\n            intent.depositId,\n            verifier,\n            intent.owner,\n            intent.to,\n            intent.amount\n        );\n    }\n\n    /// @dev Update msg.sender's accountDeposits and deposit's depositor\n    function createDeposit(\n        IERC20 _token,\n        uint256 _amount,\n        Range calldata _intentAmountRange,\n        address[] calldata _verifiers,\n        DepositVerifierData[] calldata _verifierData,\n        Currency[][] calldata _currencies\n    ) external whenNotPaused returns(uint256 depositId) {\n        _validateCreateDeposit(_amount, _intentAmountRange, _verifiers, _verifierData, _currencies);\n\n        EscrowStorage storage s = _getEscrowStorage();\n        depositId = ++s.depositCounter;\n        s.accountDeposits[msg.sender].push(depositId);\n\n        s.deposits[depositId] = Deposit({\n            depositor: msg.sender,\n            token: _token,\n            amount: _amount,\n            intentAmountRange: _intentAmountRange,\n            acceptingIntents: true,\n            intentIds: new uint256[](0),\n            remainingDeposits: _amount,\n            outstandingIntentAmount: 0\n        });\n\n        emit DepositCreated(depositId, msg.sender, _token, _amount, _intentAmountRange);\n\n        for (uint256 i = 0; i < _verifiers.length; i++) {\n            address verifier = _verifiers[i];\n            require(\n                bytes(s.depositVerifierData[depositId][verifier].payeeDetails).length == 0,\n                \"Verifier data already exists\"\n            );\n            s.depositVerifierData[depositId][verifier] = _verifierData[i];\n            s.depositVerifiers[depositId].push(verifier);\n\n            bytes32 payeeDetailsHash = keccak256(abi.encodePacked(_verifierData[i].payeeDetails));\n            emit DepositVerifierAdded(depositId, verifier, payeeDetailsHash);\n\n            for (uint256 j = 0; j < _currencies[i].length; j++) {\n                Currency memory currency = _currencies[i][j];\n                require(\n                    s.depositCurrencyConversionRate[depositId][verifier][currency.code] == 0,\n                    \"Currency conversion rate already exists\"\n                );\n                s.depositCurrencyConversionRate[depositId][verifier][currency.code] = currency.conversionRate;\n                s.depositCurrencies[depositId][verifier].push(currency.code);\n\n                emit DepositCurrencyAdded(depositId, verifier, currency.code, currency.conversionRate);\n            }\n        }\n\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\n    }\n\n    function releaseFundsToPayer(uint256 _intentId) external {\n        EscrowStorage storage s = _getEscrowStorage();\n        Intent memory intent = s.intents[_intentId];\n        Deposit storage deposit = s.deposits[intent.depositId];\n\n        require(intent.owner != address(0), IntentNotFound());\n        require(deposit.depositor == msg.sender, OnlyDepositor());\n\n        _pruneIntent(deposit, _intentId);\n\n        deposit.outstandingIntentAmount -= intent.amount;\n        IERC20 token = deposit.token;\n\n        _transferFunds(token, intent);\n\n        emit IntentReleased(\n            _intentId,\n            intent.depositId,\n            intent.owner,\n            intent.to,\n            intent.amount\n        );\n    }\n\n    /**\n     * @notice Only callable by the depositor for a deposit. Allows depositor to update the conversion rate for a currency for a\n     * payment verifier. Since intent's store the conversion rate at the time of intent, changing the conversion rate will not affect\n     * any intents that have already been signaled.\n     */\n    function updateDepositConversionRate(\n        uint256 _depositId,\n        address _verifier,\n        bytes32 _fiatCurrency,\n        uint256 _newConversionRate\n    ) external whenNotPaused {\n        EscrowStorage storage s = _getEscrowStorage();\n        Deposit storage deposit = s.deposits[_depositId];\n        uint256 oldConversionRate = s.depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency];\n\n        require(deposit.depositor == msg.sender, OnlyDepositor());\n        require(oldConversionRate != 0, \"Currency or verifier not supported\");\n        require(_newConversionRate > 0, \"Conversion rate must be greater than 0\");\n\n        s.depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency] = _newConversionRate;\n\n        emit DepositConversionRateUpdated(_depositId, _verifier, _fiatCurrency, _newConversionRate);\n    }\n\n    /**\n     * @notice Allows the depositor to update the intent amount range for their deposit.\n     * This function can only be called by the original depositor of the deposit.\n     *\n     * @param _depositId The ID of the deposit to update\n     * @param _min The new minimum intent amount allowed\n     * @param _max The new maximum intent amount allowed\n     */\n    function updateDepositIntentAmountRange(uint256 _depositId, uint256 _min, uint256 _max) external whenNotPaused {\n        EscrowStorage storage s = _getEscrowStorage();\n        Deposit storage deposit = s.deposits[_depositId];\n\n        // This also ensures that the deposit exists\n        require(deposit.depositor == msg.sender, OnlyDepositor());\n        require(_min > 0 && _min <= _max && _max <= deposit.amount, InvalidIntentAmountRange());\n\n        Range memory oldRange = deposit.intentAmountRange;\n        deposit.intentAmountRange = Range({min: _min, max: _max});\n\n        emit DepositIntentAmountRangeUpdated(_depositId, oldRange, deposit.intentAmountRange);\n    }\n\n    /**\n     * @notice Only callable by the depositor for a deposit. Allows depositor to withdraw the remaining funds in the deposit.\n     * Deposit is marked as to not accept new intents and the funds locked due to intents can be withdrawn once they expire by calling this function\n     * again. Deposit will be deleted as long as there are no more outstanding intents.\n     *\n     * @param _depositId   DepositId the depositor is attempting to withdraw.\n     */\n    function withdrawDeposit(uint256 _depositId) external {\n        EscrowStorage storage s = _getEscrowStorage();\n        Deposit storage deposit = s.deposits[_depositId];\n\n        require(deposit.depositor == msg.sender, OnlyDepositor());\n\n        (\n            uint256[] memory prunableIntents,\n            uint256 reclaimableAmount\n        ) = _getPrunableIntents(_depositId);\n\n        _pruneIntents(deposit, prunableIntents);\n\n        uint256 returnAmount = deposit.remainingDeposits + reclaimableAmount;\n\n        deposit.outstandingIntentAmount -= reclaimableAmount;\n\n        emit DepositWithdrawn(_depositId, deposit.depositor, returnAmount);\n\n        delete deposit.remainingDeposits;\n        delete deposit.acceptingIntents;\n        IERC20 token = deposit.token; // store before deleting\n        _closeDepositIfNecessary(_depositId, deposit);\n\n        token.safeTransfer(msg.sender, returnAmount);\n    }\n\n    /**\n     * @notice Allows anyone to add more funds to an existing deposit.\n     * The depositor must approve the escrow contract to transfer the additional amount.\n     *\n     * @param _depositId The ID of the deposit to increase\n     * @param _amount The additional amount to add to the deposit\n     */\n    function increaseDeposit(uint256 _depositId, uint256 _amount) external whenNotPaused {\n        EscrowStorage storage s = _getEscrowStorage();\n        Deposit storage deposit = s.deposits[_depositId];\n\n        require(deposit.depositor != address(0), DepositNotFound());\n        require(_amount > 0, InvalidAmount());\n\n        IERC20(deposit.token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        // Update deposit state\n        deposit.amount += _amount;\n        deposit.remainingDeposits += _amount;\n\n        emit DepositIncreased(_depositId, msg.sender, _amount, deposit.amount);\n    }\n\n    /**\n     * @notice Allows the current depositor to transfer ownership of the deposit to a new address.\n     * Only the current depositor can call this function.\n     *\n     * @param _depositId The ID of the deposit to transfer\n     * @param _newDepositor The address of the new depositor\n     */\n    function changeDepositor(uint256 _depositId, address _newDepositor) external whenNotPaused {\n        EscrowStorage storage s = _getEscrowStorage();\n        Deposit storage deposit = s.deposits[_depositId];\n\n        require(deposit.depositor == msg.sender, OnlyDepositor());\n        require(_newDepositor != address(0), InvalidAddress());\n        require(_newDepositor != deposit.depositor, InvalidAddress());\n\n        address oldDepositor = deposit.depositor;\n\n        // Update the depositor\n        deposit.depositor = _newDepositor;\n\n        // Update accountDeposits mapping - remove from old depositor\n        s.accountDeposits[oldDepositor].removeStorage(_depositId);\n\n        // Add to new depositor's account deposits\n        s.accountDeposits[_newDepositor].push(_depositId);\n\n        emit DepositDepositorChanged(_depositId, oldDepositor, _newDepositor);\n    }\n\n    // *** Governance functions ***\n\n        /**\n     * @notice GOVERNANCE ONLY: Adds a payment verifier to the whitelist.\n     *\n     * @param _verifier   The payment verifier address to add\n     */\n    function addWhitelistedPaymentVerifier(address _verifier) external onlyOwner {\n        EscrowStorage storage s = _getEscrowStorage();\n        require(_verifier != address(0), \"Payment verifier cannot be zero address\");\n        require(!s.whitelistedPaymentVerifiers[_verifier], \"Payment verifier already whitelisted\");\n\n        s.whitelistedPaymentVerifiers[_verifier] = true;\n\n        emit PaymentVerifierAdded(_verifier);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Removes a payment verifier from the whitelist.\n     *\n     * @param _verifier   The payment verifier address to remove\n     */\n    function removeWhitelistedPaymentVerifier(address _verifier) external onlyOwner {\n        EscrowStorage storage s = _getEscrowStorage();\n        require(s.whitelistedPaymentVerifiers[_verifier], \"Payment verifier not whitelisted\");\n\n        s.whitelistedPaymentVerifiers[_verifier] = false;\n        emit PaymentVerifierRemoved(_verifier);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the maximum number of intents allowed per deposit.\n     *\n     * @param _maxIntentsPerDeposit The new maximum number of intents allowed per deposit\n     */\n    function setMaxIntentsPerDeposit(uint256 _maxIntentsPerDeposit) external onlyOwner {\n        EscrowStorage storage s = _getEscrowStorage();\n        require(_maxIntentsPerDeposit > 0, \"Max intents must be greater than 0\");\n        uint256 oldMax = s.maxIntentsPerDeposit;\n        s.maxIntentsPerDeposit = _maxIntentsPerDeposit;\n        emit MaxIntentsPerDepositUpdated(oldMax, _maxIntentsPerDeposit);\n    }\n\n    /**\n     * @notice GOVERNANCE ONLY: Updates the intent expiration period, after this period elapses an intent can be pruned to prevent\n     * locking up a depositor's funds.\n     *\n     * @param _intentExpirationPeriod   New intent expiration period\n     */\n    function setIntentExpirationPeriod(uint256 _intentExpirationPeriod) external onlyOwner {\n        EscrowStorage storage s = _getEscrowStorage();\n        require(_intentExpirationPeriod != 0, \"Max intent expiration period cannot be zero\");\n\n        s.intentExpirationPeriod = _intentExpirationPeriod;\n        emit IntentExpirationPeriodSet(_intentExpirationPeriod);\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    /* ============ External View Functions ============ */\n\n    // Getter functions for easier testing\n    function getDepositIntentIds(uint256 _depositId) external view returns (uint256[] memory) {\n        return _getEscrowStorage().deposits[_depositId].intentIds;\n    }\n\n    /* ============ Internal Functions ============ */\n    function _validateCreateDeposit(\n        uint256 _amount,\n        Range memory _intentAmountRange,\n        address[] calldata _verifiers,\n        DepositVerifierData[] calldata _verifierData,\n        Currency[][] calldata _currencies\n    ) internal view {\n        EscrowStorage storage s = _getEscrowStorage();\n        require(\n            _intentAmountRange.min != 0 &&\n            _intentAmountRange.min <= _intentAmountRange.max &&\n            _intentAmountRange.min <= _amount,\n            InvalidIntentAmountRange()\n        );\n        require(_verifiers.length > 0, \"Invalid verifiers\");\n        require(_verifiers.length == _verifierData.length, \"Invalid verifier data\");\n        require(_verifiers.length == _currencies.length, \"Invalid currencies length\");\n\n        for (uint256 i = 0; i < _verifiers.length; i++) {\n            address verifier = _verifiers[i];\n\n            require(verifier != address(0), \"Verifier cannot be zero address\");\n            require(s.whitelistedPaymentVerifiers[verifier], \"Payment verifier not whitelisted\");\n\n            // _verifierData.intentGatingService can be zero address, _verifierData.data can be empty\n            require(bytes(_verifierData[i].payeeDetails).length != 0, \"Payee details cannot be empty\");\n\n            for (uint256 j = 0; j < _currencies[i].length; j++) {\n                require(\n                    IPaymentVerifierV2(verifier).isCurrency(_currencies[i][j].code),\n                    \"Currency not supported by verifier\"\n                );\n                require(_currencies[i][j].conversionRate > 0, \"Conversion rate must be greater than 0\");\n            }\n        }\n    }\n\n    function _validateIntent(\n        uint256 _depositId,\n        Deposit storage _deposit,\n        uint256 _amount,\n        address _to,\n        address _verifier,\n        bytes32 _fiatCurrency\n    ) internal view {\n        EscrowStorage storage s = _getEscrowStorage();\n        require(s.accountIntent[msg.sender] == 0, IntentAlreadyExists());\n        require(_deposit.depositor != address(0), DepositNotFound());\n        require(_deposit.acceptingIntents, DepositNotAcceptingIntents());\n        require(_amount >= _deposit.intentAmountRange.min, InvalidAmount());\n        require(_amount <= _deposit.intentAmountRange.max, InvalidAmount());\n        require(_to != address(0), InvalidRecipient());\n\n        DepositVerifierData memory verifierData = s.depositVerifierData[_depositId][_verifier];\n        require(bytes(verifierData.payeeDetails).length != 0, \"Payment verifier not supported\");\n        require(s.depositCurrencyConversionRate[_depositId][_verifier][_fiatCurrency] != 0, \"Currency not supported\");\n    }\n\n    /**\n     * @notice Cycles through all intents currently open on a deposit and sees if any have expired. If they have expired\n     * the outstanding amounts are summed and returned alongside the intentHashes\n     */\n    function _getPrunableIntents(\n        uint256 _depositId\n    )\n        internal\n        view\n        returns(uint256[] memory prunableIntents, uint256 reclaimedAmount)\n    {\n        EscrowStorage storage s = _getEscrowStorage();\n        uint256[] memory intentIds = s.deposits[_depositId].intentIds;\n        prunableIntents = new uint256[](intentIds.length);\n\n        for (uint256 i = 0; i < intentIds.length; ++i) {\n            Intent memory intent = s.intents[intentIds[i]];\n            if (intent.timestamp + s.intentExpirationPeriod < block.timestamp) {\n                prunableIntents[i] = intentIds[i];\n                reclaimedAmount += intent.amount;\n            }\n        }\n    }\n\n    function _pruneIntents(Deposit storage _deposit, uint256[] memory _intents) internal {\n        for (uint256 i = 0; i < _intents.length; ++i) {\n            if (_intents[i] != 0) {\n                _pruneIntent(_deposit, _intents[i]);\n            }\n        }\n    }\n\n    /**\n     * @notice Pruning an intent involves\n     * 1. deleting its state from the intents mapping\n     * 2. deleting the intent from it's owners intents array\n     * 3. deleting the intentHash from the deposit's intentHashes array.\n     */\n    function _pruneIntent(Deposit storage _deposit, uint256 _intentId) internal {\n        EscrowStorage storage s = _getEscrowStorage();\n        Intent memory intent = s.intents[_intentId];\n\n        delete s.accountIntent[intent.owner];\n        delete s.intents[_intentId];\n        _deposit.intentIds.removeStorage(_intentId);\n    }\n\n    /**\n     * @notice Removes a deposit if no outstanding intents AND no remaining deposits. Deleting a deposit deletes it from the\n     * deposits mapping and removes tracking it in the user's accountDeposits mapping. Also deletes the verification data for the\n     * deposit.\n     */\n    function _closeDepositIfNecessary(uint256 _depositId, Deposit storage _deposit) internal {\n        EscrowStorage storage s = _getEscrowStorage();\n        uint256 openDepositAmount = _deposit.outstandingIntentAmount + _deposit.remainingDeposits;\n        if (openDepositAmount == 0) {\n            s.accountDeposits[_deposit.depositor].removeStorage(_depositId);\n            _deleteDepositVerifierAndCurrencyData(_depositId);\n            emit DepositClosed(_depositId, _deposit.depositor);\n            delete s.deposits[_depositId];\n        }\n    }\n\n    /**\n     * @notice Iterates through all verifiers for a deposit and deletes the corresponding verifier data and currencies.\n     */\n    function _deleteDepositVerifierAndCurrencyData(uint256 _depositId) internal {\n        EscrowStorage storage s = _getEscrowStorage();\n        address[] memory verifiers = s.depositVerifiers[_depositId];\n        for (uint256 i = 0; i < verifiers.length; i++) {\n            address verifier = verifiers[i];\n            delete s.depositVerifierData[_depositId][verifier];\n            bytes32[] memory currencies = s.depositCurrencies[_depositId][verifier];\n            for (uint256 j = 0; j < currencies.length; j++) {\n                delete s.depositCurrencyConversionRate[_depositId][verifier][currencies[j]];\n            }\n        }\n    }\n\n    // @dev the fee is not implemented in this version\n    function _transferFunds(IERC20 _token, Intent memory _intent) internal {\n        _token.safeTransfer(_intent.to, _intent.amount);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     */\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n}\n"
    },
    "src/external/AddressArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: MIT\n*/\n\npragma solidity ^0.8.17;\n\n/**\n * @title AddressArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Address Arrays\n *\n * CHANGELOG:\n * - 4/21/21: Added validatePairsWithArray methods\n */\nlibrary AddressArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(address[] memory A, address a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            address current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(address[] memory A, address a)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            (address[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The address to remove\n     */\n    function removeStorage(address[] storage A, address a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"Address not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(address[] memory A, uint256 index)\n        internal\n        pure\n        returns (address[] memory, address)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        address[] memory newAddresses = new address[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newAddresses[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newAddresses[j - 1] = A[j];\n        }\n        return (newAddresses, A[index]);\n    }\n}\n"
    },
    "src/external/Bytes32ArrayUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\n/**\n * @title Bytes32ArrayUtils\n * @author ZKP2P\n *\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\n */\nlibrary Bytes32ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\n        (, bool isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n    * Returns true if there are 2 elements that are the same in an array\n    * @param A The input array to search\n    * @return Returns boolean for the first occurrence of a duplicate\n    */\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\n        require(A.length > 0, \"A is empty\");\n\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            bytes32 current = A[i];\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (current == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     * @return Returns the array with the object removed.\n     */\n    function remove(bytes32[] memory A, bytes32 a)\n        internal\n        pure\n        returns (bytes32[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            (bytes32[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(bytes32[] storage A, bytes32 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"bytes32 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n\n    /**\n    * Removes specified index from array\n    * @param A The input array to search\n    * @param index The index to remove\n    * @return Returns the new array and the removed entry\n    */\n    function pop(bytes32[] memory A, uint256 index)\n        internal\n        pure\n        returns (bytes32[] memory, bytes32)\n    {\n        uint256 length = A.length;\n        require(index < A.length, \"Index must be < A length\");\n        bytes32[] memory newBytes = new bytes32[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newBytes[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newBytes[j - 1] = A[j];\n        }\n        return (newBytes, A[index]);\n    }\n}\n"
    },
    "src/external/Claims.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./ReclaimStringUtils.sol\";\n\n// Imported from @reclaimprotocol/verifier-solidity-sdk\n\n/**\n * Library to assist with requesting,\n * serialising & verifying credentials\n */\nlibrary Claims {\n\t/** Data required to describe a claim */\n\tstruct CompleteClaimData {\n\t\tbytes32 identifier; // hash of the claimInfo\n\t\taddress owner;\n\t\tuint32 timestampS; // when the claim was created\n\t\tuint32 epoch;\n\t}\n\n\tstruct ClaimInfo {\n\t\tstring provider;\n\t\tstring parameters;\n\t\tstring context;\n\t}\n\n\t/** Claim with signatures & signer */\n\tstruct SignedClaim {\n\t\tCompleteClaimData claim;\n\t\tbytes[] signatures;\n\t}\n\n\t/**\n\t * Asserts that the claim is signed by the expected witnesses\n\t */\n\tfunction assertValidSignedClaim(\n\t\tSignedClaim memory self,\n\t\taddress[] memory expectedWitnessAddresses\n\t) internal pure {\n\t\trequire(self.signatures.length > 0, \"No signatures\");\n\t\taddress[] memory signedWitnesses = recoverSignersOfSignedClaim(self);\n\t\tfor (uint256 i = 0; i < expectedWitnessAddresses.length; i++) {\n\t\t\tbool found = false;\n\t\t\tfor (uint256 j = 0; j < signedWitnesses.length; j++) {\n\t\t\t\tif (signedWitnesses[j] == expectedWitnessAddresses[i]) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire(found, \"Missing witness signature\");\n\t\t}\n\t}\n\n\t/**\n\t * @dev recovers the signer of the claim\n\t */\n\tfunction recoverSignersOfSignedClaim(\n\t\tSignedClaim memory self\n\t) internal pure returns (address[] memory) {\n\t\tbytes memory serialised = serialise(self.claim);\n\t\taddress[] memory signers = new address[](self.signatures.length);\n\t\tfor (uint256 i = 0; i < self.signatures.length; i++) {\n\t\t\tsigners[i] = verifySignature(serialised, self.signatures[i]);\n\t\t}\n\n\t\treturn signers;\n\t}\n\n\t/**\n\t * @dev serialises the credential into a string;\n\t * the string is used to verify the signature\n\t *\n\t * the serialisation is the same as done by the TS library\n\t */\n\tfunction serialise(\n\t\tCompleteClaimData memory self\n\t) internal pure returns (bytes memory) {\n\t\treturn\n\t\t\tabi.encodePacked(\n\t\t\t\tStringUtils.bytes2str(abi.encodePacked(self.identifier)),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.address2str(self.owner),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.uint2str(self.timestampS),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.uint2str(self.epoch)\n\t\t\t);\n\t}\n\n\t/**\n\t * @dev returns the address of the user that generated the signature\n\t */\n\tfunction verifySignature(\n\t\tbytes memory content,\n\t\tbytes memory signature\n\t) internal pure returns (address signer) {\n\t\tbytes32 signedHash = keccak256(\n\t\t\tabi.encodePacked(\n\t\t\t\t\"\\x19Ethereum Signed Message:\\n\",\n\t\t\t\tStringUtils.uint2str(content.length),\n\t\t\t\tcontent\n\t\t\t)\n\t\t);\n\t\treturn ECDSA.recover(signedHash, signature);\n\t}\n\n\tfunction hashClaimInfo(ClaimInfo memory claimInfo) internal pure returns (bytes32) {\n\t\tbytes memory serialised = abi.encodePacked(\n\t\t\tclaimInfo.provider,\n\t\t\t\"\\n\",\n\t\t\tclaimInfo.parameters,\n\t\t\t\"\\n\",\n\t\t\tclaimInfo.context\n\t\t);\n\t\treturn keccak256(serialised);\n\t}\n}\n"
    },
    "src/external/DateTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// ----------------------------------------------------------------------------\n// DateTime Library v2.0\n//\n// A gas-efficient Solidity date and time library\n//\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n//\n// Tested date range 1970/01/01 to 2345/12/31\n//\n// Conventions:\n// Unit      | Range         | Notes\n// :-------- |:-------------:|:-----\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\n// year      | 1970 ... 2345 |\n// month     | 1 ... 12      |\n// day       | 1 ... 31      |\n// hour      | 0 ... 23      |\n// minute    | 0 ... 59      |\n// second    | 0 ... 59      |\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\n//\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\n//\n// NOTE: This library has been pruned to keep only functions needed by zkp2p\n// ----------------------------------------------------------------------------\n\nlibrary DateTime {\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\n    uint256 constant SECONDS_PER_MINUTE = 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    uint256 constant DOW_MON = 1;\n    uint256 constant DOW_TUE = 2;\n    uint256 constant DOW_WED = 3;\n    uint256 constant DOW_THU = 4;\n    uint256 constant DOW_FRI = 5;\n    uint256 constant DOW_SAT = 6;\n    uint256 constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\n        require(year >= 1970);\n        int256 _year = int256(year);\n        int256 _month = int256(month);\n        int256 _day = int256(day);\n\n        int256 __days = _day - 32075 + (1461 * (_year + 4800 + (_month - 14) / 12)) / 4\n            + (367 * (_month - 2 - ((_month - 14) / 12) * 12)) / 12\n            - (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) / 4 - OFFSET19700101;\n\n        _days = uint256(__days);\n    }\n\n    function timestampFromDateTime(\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    )\n        internal\n        pure\n        returns (uint256 timestamp)\n    {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR\n            + minute * SECONDS_PER_MINUTE + second;\n    }\n}\n"
    },
    "src/external/ReclaimStringUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// Imported from @reclaimprotocol/verifier-solidity-sdk\n\n/**\n * Utilities for string manipulation & conversion\n */\nlibrary StringUtils {\n\tfunction address2str(address x) internal pure returns (string memory) {\n\t\tbytes memory s = new bytes(40);\n\t\tfor (uint i = 0; i < 20; i++) {\n\t\t\tbytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\n\t\t\tbytes1 hi = bytes1(uint8(b) / 16);\n\t\t\tbytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n\t\t\ts[2 * i] = getChar(hi);\n\t\t\ts[2 * i + 1] = getChar(lo);\n\t\t}\n\t\treturn string(abi.encodePacked(\"0x\", s));\n\t}\n\n\tfunction bytes2str(bytes memory buffer) internal pure returns (string memory) {\n\t\t// Fixed buffer size for hexadecimal convertion\n\t\tbytes memory converted = new bytes(buffer.length * 2);\n\t\tbytes memory _base = \"0123456789abcdef\";\n\n\t\tfor (uint256 i = 0; i < buffer.length; i++) {\n\t\t\tconverted[i * 2] = _base[uint8(buffer[i]) / _base.length];\n\t\t\tconverted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\n\t\t}\n\n\t\treturn string(abi.encodePacked(\"0x\", converted));\n\t}\n\n\tfunction getChar(bytes1 b) internal pure returns (bytes1 c) {\n\t\tif (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n\t\telse return bytes1(uint8(b) + 0x57);\n\t}\n\n\tfunction bool2str(bool _b) internal pure returns (string memory _uintAsString) {\n\t\tif (_b) {\n\t\t\treturn \"true\";\n\t\t} else {\n\t\t\treturn \"false\";\n\t\t}\n\t}\n\n\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n\t\tif (_i == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tuint j = _i;\n\t\tuint len;\n\t\twhile (j != 0) {\n\t\t\tlen++;\n\t\t\tj /= 10;\n\t\t}\n\t\tbytes memory bstr = new bytes(len);\n\t\tuint k = len;\n\t\twhile (_i != 0) {\n\t\t\tk = k - 1;\n\t\t\tuint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n\t\t\tbytes1 b1 = bytes1(temp);\n\t\t\tbstr[k] = b1;\n\t\t\t_i /= 10;\n\t\t}\n\t\treturn string(bstr);\n\t}\n\n\tfunction areEqual(\n\t\tstring calldata _a,\n\t\tstring storage _b\n\t) internal pure returns (bool) {\n\t\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\n\t}\n\n\tfunction areEqual(string memory _a, string memory _b) internal pure returns (bool) {\n\t\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\n\t}\n\n\tfunction toLower(string memory str) internal pure returns (string memory) {\n\t\tbytes memory bStr = bytes(str);\n\t\tbytes memory bLower = new bytes(bStr.length);\n\t\tfor (uint i = 0; i < bStr.length; i++) {\n\t\t\t// Uppercase character...\n\t\t\tif ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\n\t\t\t\t// So we add 32 to make it lowercase\n\t\t\t\tbLower[i] = bytes1(uint8(bStr[i]) + 32);\n\t\t\t} else {\n\t\t\t\tbLower[i] = bStr[i];\n\t\t\t}\n\t\t}\n\t\treturn string(bLower);\n\t}\n\n\tfunction substring(\n\t\tstring memory str,\n\t\tuint startIndex,\n\t\tuint endIndex\n\t) internal pure returns (string memory) {\n\t\tbytes memory strBytes = bytes(str);\n\t\tbytes memory result = new bytes(endIndex - startIndex);\n\t\tfor (uint i = startIndex; i < endIndex; i++) {\n\t\t\tresult[i - startIndex] = strBytes[i];\n\t\t}\n\t\treturn string(result);\n\t}\n}\n"
    },
    "src/external/StringArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache-2.0\n*/\n\npragma solidity ^0.8.18;\n\n/**\n * @title StringArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle String Arrays\n */\nlibrary StringArrayUtils {\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input string to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(string[] memory A, string memory a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (keccak256(bytes(A[i])) == keccak256(bytes(a))) {\n                return (i, true);\n            }\n        }\n        return (type(uint256).max, false);\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The string to remove\n     */\n    function removeStorage(string[] storage A, string memory a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"String not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n}"
    },
    "src/external/Uint256ArrayUtils.sol": {
      "content": "/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    SPDX-License-Identifier: Apache-2.0\n*/\n\npragma solidity ^0.8.18;\n\n/**\n * @title Uint256ArrayUtils\n * @author Set Protocol\n *\n * Utility functions to handle Uint256 Arrays\n */\nlibrary Uint256ArrayUtils {\n\n    uint256 constant internal MAX_INT = 2**256 - 1;\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (MAX_INT, false);\n    }\n\n    /**\n     * Returns the combination of the two arrays\n     * @param A The first array\n     * @param B The second array\n     * @return Returns A extended by B\n     */\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\n        uint256 aLength = A.length;\n        uint256 bLength = B.length;\n        uint256[] memory newUints = new uint256[](aLength + bLength);\n        for (uint256 i = 0; i < aLength; i++) {\n            newUints[i] = A[i];\n        }\n        for (uint256 j = 0; j < bLength; j++) {\n            newUints[aLength + j] = B[j];\n        }\n        return newUints;\n    }\n\n    /**\n     * @param A The input array to search\n     * @param a The bytes32 to remove\n     */\n    function removeStorage(uint256[] storage A, uint256 a)\n        internal\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert(\"uint256 not in array.\");\n        } else {\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\n            A.pop();\n        }\n    }\n}\n"
    },
    "src/interfaces/IEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.30;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IEscrow {\n    struct Range {\n        uint256 min;                                // Minimum value of the range\n        uint256 max;                                // Maximum value of the range\n    }\n\n    struct Deposit {\n        address depositor;                          // Address of depositor\n        IERC20 token;                               // Address of deposit token\n        uint256 amount;                             // Amount of deposit token\n        Range intentAmountRange;                    // Range of take amount per intent\n        // Deposit state\n        bool acceptingIntents;                      // State: True if the deposit is accepting intents, False otherwise\n        uint256 remainingDeposits;                  // State: Amount of remaining deposited liquidity\n        uint256 outstandingIntentAmount;            // State: Amount of outstanding intents (may include expired intents)\n        uint256[] intentIds;                        // State: Array of ids of all open intents (may include some expired if not pruned)\n    }\n\n    struct Currency {\n        bytes32 code;                               // Currency code (keccak256 hash of the currency code)\n        uint256 conversionRate;                     // Conversion rate of deposit token to fiat currency\n    }\n\n    struct DepositVerifierData {\n        string payeeDetails;                        // Payee details, could be both hash or raw details; verifier will decide how to parse it\n        bytes data;                                 // Verification Data: Additional data used for payment verification; Can hold attester address\n        // in case of TLS proofs, domain key hash in case of zkEmail proofs, currency code etc.\n    }\n\n    struct Intent {\n        address owner;                              // Address of the intent owner\n        address to;                                 // Address to forward funds to (can be same as owner)\n        uint256 depositId;                          // ID of the deposit the intent is associated with\n        uint256 amount;                             // Amount of the deposit.token the owner wants to take\n        uint256 timestamp;                          // Timestamp of the intent\n        address paymentVerifier;                    // Address of the payment verifier corresponding to payment service the owner is\n                                                    // going to pay with offchain\n        bytes32 fiatCurrency;                       // Currency code that the owner is paying in offchain (keccak256 hash of the currency code)\n        uint256 conversionRate;                     // Conversion rate of deposit token to fiat currency at the time of intent\n    }\n\n    struct RedeemRequest {\n        address owner;\n        uint256 amount;\n        uint256 timestamp;\n    }\n\n    event IntentSignaled(\n        address owner,\n        address to,\n        address verifier,\n        uint256 amount,\n        uint256 intentId,\n        uint256 conversionRate\n    );\n\n    event IntentFulfilled(\n        uint256 indexed intentId,\n        uint256 indexed depositId,\n        address indexed verifier,\n        address owner,\n        address to,\n        uint256 amount\n    );\n\n    event IntentReleased(\n        uint256 indexed intentId,\n        uint256 indexed depositId,\n        address owner,\n        address to,\n        uint256 amount\n    );\n\n    event IntentCancelled(\n        uint256 intentId,\n        address owner\n    );\n\n    event RedeemRequestSignaled(\n        uint256 indexed redeemId,\n        address indexed owner,\n        uint256 amount,\n        string accountNumber\n    );\n\n    event RedeemRequestFulfilled(\n        uint256 redeemId\n    );\n\n    event RedeemRequestCancelled(\n        uint256 redeemId\n    );\n\n    event DepositCreated(\n        uint256 depositId,\n        address depositor,\n        IERC20 token,\n        uint256 amount,\n        Range intentAmountRange\n    );\n\n    event DepositVerifierAdded(\n        uint256 indexed depositId,\n        address indexed verifier,\n        bytes32 payeeDetailsHash\n    );\n\n    event DepositCurrencyAdded(\n        uint256 indexed depositId,\n        address indexed verifier,\n        bytes32 indexed currency,\n        uint256 conversionRate\n    );\n\n    event DepositConversionRateUpdated(\n        uint256 indexed depositId,\n        address indexed verifier,\n        bytes32 fiatCurrency,\n        uint256 newConversionRate\n    );\n\n    event DepositIncreased(\n        uint256 indexed depositId,\n        address indexed depositor,\n        uint256 additionalAmount,\n        uint256 newTotalAmount\n    );\n\n    event DepositWithdrawn(\n        uint256 indexed depositId,\n        address indexed depositor,\n        uint256 amount\n    );\n\n    event DepositDepositorChanged(\n        uint256 indexed depositId,\n        address oldDepositor,\n        address newDepositor\n    );\n\n    event DepositClosed(uint256 depositId, address depositor);\n\n    event DepositIntentAmountRangeUpdated(\n        uint256 indexed depositId,\n        Range oldRange,\n        Range newRange\n    );\n\n    event PaymentVerifierAdded(address verifier);\n    event PaymentVerifierRemoved(address verifier);\n    event IntentExpirationPeriodSet(uint256 intentExpirationPeriod);\n    event MaxIntentsPerDepositUpdated(uint256 oldMax, uint256 newMax);\n\n    error InvalidAmount();\n    error InvalidRecipient();\n    error IntentAlreadyExists();\n    error IntentNotFound();\n    error InvalidAccountNumber();\n    error RedeemRequestNotFound();\n    error RedeemAlreadyExists();\n    error OnlyDepositor();\n    error OnlyIntentOwner();\n    error InvalidIntentAmountRange();\n    error DepositNotFound();\n    error DepositNotAcceptingIntents();\n    error InvalidAddress();\n}\n"
    },
    "src/interfaces/IMintableERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.30;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMintableERC20 is IERC20 {\n    function mint(address to, uint256 amount) external;\n    // burn the msg.sender's balance\n    function burn(uint256 amount) external;\n}\n"
    },
    "src/interfaces/IZkMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.30;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IZkMinter {\n    struct DepositVerifierData {\n        string payeeDetails;                        // Payee details, could be both hash or raw details; verifier will decide how to parse it\n        bytes data;                                 // Verification Data: Additional data used for payment verification; Can hold attester address\n                                                    // in case of TLS proofs, domain key hash in case of zkEmail proofs, currency code etc.\n    }\n\n    struct Intent {\n        address owner;                              // Address of the intent owner\n        address to;                                 // Address to forward funds to (can be same as owner)\n        uint256 amount;                             // Amount of the deposit.token the owner wants to take\n        uint256 timestamp;                          // Timestamp of the intent\n        address paymentVerifier;                    // Address of the payment verifier corresponding to payment service the owner is\n    }\n\n    struct RedeemRequest {\n        address owner;\n        uint256 amount;\n        uint256 timestamp;\n    }\n\n    event IntentSignaled(\n        address to,\n        address verifier,\n        uint256 amount,\n        uint256 intentId\n    );\n\n    event IntentFulfilled(\n        bytes32 intentHash,\n        address verifier,\n        address owner,\n        address to,\n        uint256 amount\n    );\n\n    event IntentCancelled(\n        uint256 intentId\n    );\n\n    event RedeemRequestSignaled(\n        uint256 indexed redeemId,\n        address indexed owner,\n        uint256 amount,\n        string accountNumber\n    );\n\n    event RedeemRequestFulfilled(\n        uint256 redeemId\n    );\n\n    event RedeemRequestCancelled(\n        uint256 redeemId\n    );\n\n    error InvalidAmount();\n    error IntentNotFound();\n    error InvalidAccountNumber();\n    error RedeemRequestNotFound();\n    error RedeemAlreadyExists();\n}\n"
    },
    "src/KRW.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.30;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract KRW is ERC20, AccessControl, ERC20Burnable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    constructor(address _admin) ERC20(\"Korea Won\", \"KRW\") {\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\n        _grantRole(MINTER_ROLE, _admin);\n    }\n\n    // Custom mint function for testing\n    function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\n        _mint(to, amount);\n    }\n}\n"
    },
    "src/lib/Bytes32ConversionUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nlibrary Bytes32ConversionUtils {\n\n    /// @notice Convert a bytes32 value into its hex string representation WITH '0x' prefix.\n    /// @dev Resulting string is 66 characters long: \n    ///      - 2 chars for \"0x\" \n    ///      - 64 chars for the hex digits.\n    function toHexString(bytes32 data) internal pure returns (string memory) {\n        bytes memory alphabet = \"0123456789abcdef\";\n        // 66 = 2 (for \"0x\") + 64 (for 32 bytes * 2 hex chars each)\n        bytes memory str = new bytes(66);\n\n        // Add '0x' prefix\n        str[0] = '0';\n        str[1] = 'x';\n\n        for (uint i = 0; i < 32; i++) {\n            // Each byte splits into two hex characters.\n            // High nibble (4 bits)\n            str[2 + 2*i]   = alphabet[uint(uint8(data[i] >> 4))];\n            // Low nibble (4 bits)\n            str[3 + 2*i] = alphabet[uint(uint8(data[i] & 0x0f))];\n        }\n        return string(str);\n    }\n}\n"
    },
    "src/lib/ClaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nlibrary ClaimVerifier {\n\n    /* ============ Constants ============ */\n\n    // bytes constant CONTEXT_ADDRESS_BYTES      = bytes(\"{\\\"contextAddress\\\":\\\"\");\n    // bytes constant CONTEXT_MESSAGE_BYTES      = bytes(\"\\\"contextMessage\\\":\\\"\");\n    bytes constant EXTRACTED_PARAMETERS_BYTES = bytes(\"{\\\"extractedParameters\\\":{\\\"\");\n    bytes constant PROVIDER_HASH_PARAM_BYTES  = bytes(\"\\\"providerHash\\\":\\\"\");\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Find the end index of target string in the data string. Returns the end index + 1 if\n     * the target string in the data string if found. Returns type(uint256).max if:\n     * - Target is longer than data\n     * - Target is not found\n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\n     */\n    function findSubstringEndIndex(\n        string memory data,\n        string memory target\n    ) internal pure returns (uint256) {\n        bytes memory dataBytes = bytes(data);\n        bytes memory targetBytes = bytes(target);\n\n        if (dataBytes.length < targetBytes.length) {\n            return type(uint256).max;\n        }\n\n        // Find start of target\n        for (uint i = 0; i <= dataBytes.length - targetBytes.length; i++) {\n            bool isMatch = true;\n            for (uint j = 0; j < targetBytes.length && isMatch; j++) {\n                if (dataBytes[i + j] != targetBytes[j]) {\n                    isMatch = false;\n                    break;\n                }\n            }\n            if (isMatch) {\n                return i + targetBytes.length; // Return end index + 1\n            }\n        }\n        return type(uint256).max;\n    }\n\n    /**\n     * Extracts given target field value from context in claims. Extracts only ONE value.\n     * Pass prefix formatted with quotes, for example '\"providerHash\\\":\\\"'\n     * Parts of the code are adapted from: https://basescan.org/address/0x7281630e4346dd4c0b7ae3b4689c1d0102741410#code\n     *\n     * @param data      Context string from which target value needs to be extracted\n     * @param prefix    Prefix of the target value that needs to be extracted\n     */\n    function extractFieldFromContext(\n        string memory data,\n        string memory prefix\n    ) internal pure returns (string memory) {\n        // Find end index of prefix; which is the start index of the value\n        uint256 start = findSubstringEndIndex(data, prefix);\n        bytes memory dataBytes = bytes(data);\n        if (start == dataBytes.length) {\n            return \"\"; // Prefix not found. Malformed or missing message\n        }\n\n        // Find the end of the VALUE, assuming it ends with a quote not preceded by a backslash\n        uint256 end = start;\n        while (\n            end < dataBytes.length &&\n            !(dataBytes[end] == '\"' && dataBytes[end - 1] != \"\\\\\")\n        ) {\n            end++;\n        }\n        if (end <= start) {\n            return \"\"; // Malformed or missing message\n        }\n        bytes memory contextMessage = new bytes(end - start);\n        for (uint i = start; i < end; i++) {\n            contextMessage[i - start] = dataBytes[i];\n        }\n        return string(contextMessage);\n    }\n\n    /**\n     * Extracts ALL values from context in a single pass. Context is stored as serialized JSON string with\n     * two keys: extractedParameters and providerHash. ExtractedParameters itself is a JSON string with\n     * key-value pairs. This function returns extracted individual values from extractedParameters along\n     * with providerHash (if extractProviderHash is true). Use maxValues to limit the number of expected values\n     * to be extracted from extractedParameters. In most cases, one would need to extract all values from\n     * extractedParameters and providerHash, hence use this function over calling extractFieldFromContext\n     * multiple times.\n     *\n     * @param data                  Context string from which target value needs to be extracted\n     * @param maxValues             Maximum number of values to be extracted from extractedParameters including intentHash and providerHash\n     * @param extractIntentAndProviderHash Extracts and returns intentHash and providerHash if true\n     */\n     // '{\"extractedParameters\":{\"price\":\"2529.65\"},\"providerHash\":\"0xf44817617d1dfa5219f6aaa0d4901f9b9b7a6845bbf7b639d9bffeacc934ff9a\"}',\n    function extractAllFromContext(\n        string memory data,\n        uint8 maxValues,\n        bool extractIntentAndProviderHash\n    ) internal pure returns (string[] memory) {\n        require(maxValues > 0, \"Max values must be greater than 0\");\n\n        bytes memory dataBytes = bytes(data);\n\n        // Reuse variables to avoid \"stack too deep\"\n        uint index = 0;\n        uint valuesFound = 0;\n        uint startIndex;\n        uint endIndex;\n        bool isValue;\n\n        uint[] memory valueIndices = new uint[](2 * maxValues);\n        for (uint i = 0; i < EXTRACTED_PARAMETERS_BYTES.length; i++) {\n            require(\n                dataBytes[index + i] == EXTRACTED_PARAMETERS_BYTES[i],\n                \"Extraction failed. Malformed extractedParameters\"\n            );\n        }\n        index += EXTRACTED_PARAMETERS_BYTES.length;\n        isValue = false; // starts with a key right after '{\\\"extractedParameters\\\":{\\\"'\n\n        while (index < dataBytes.length) {\n            // Keep incrementing until '\"', escaped quotes are not considered\n            if (!(dataBytes[index] == '\"' && dataBytes[index - 1] != \"\\\\\")) {\n                index++;\n                continue;\n            }\n            if (!isValue) {\n                // \\\":\\\" (3 chars)\n                require(\n                    dataBytes[index + 1] == \":\" && dataBytes[index + 2] == '\"',\n                    \"Extraction failed. Malformed data 1\"\n                );\n                index += 3; // move it after \\\"\n                isValue = true;\n                // Mark start\n                valueIndices[2 * valuesFound] = index; // start index\n            } else {\n                // \\\",\\\" (3 chars) or \\\"}, (3 chars)\n                // \\\"}} is not supported, there should always be a providerHash\n                bool commaThenQuote = (dataBytes[index + 1] == \",\" && dataBytes[index + 2] == '\"');\n                bool braceThenComma = (dataBytes[index + 1] == '}' && dataBytes[index + 2] == \",\");\n                require(\n                    commaThenQuote || braceThenComma,\n                    \"Extraction failed. Malformed data 2\"\n                );\n                valueIndices[2 * valuesFound + 1] = index; // end index\n                valuesFound++;\n\n                // Revert if valuesFound == maxValues and next char is a comma as there will be more values\n                if (commaThenQuote) {\n                    // Revert if valuesFound == maxValues and next char is a comma as there will be more values\n                    require(valuesFound != maxValues, \"Extraction failed. Exceeded max values\");\n                    index += 3;\n                    isValue = false;\n                } else { // index + 1 = \"}\"\n                    index += 3;\n                    break; // end of extractedParameters\n                }\n            }\n        }\n\n        if (extractIntentAndProviderHash) {\n            for (uint i = 0; i < PROVIDER_HASH_PARAM_BYTES.length; i++) {\n                require(\n                    dataBytes[index + i] == PROVIDER_HASH_PARAM_BYTES[i],\n                    \"Extraction failed. Malformed providerHash\"\n                );\n            }\n            index += PROVIDER_HASH_PARAM_BYTES.length;\n\n            // final indices tuple in valueIndices will be for star and end indices of provider hash\n            valueIndices[2 * valuesFound] = index;\n            // Keep incrementing until '\"'\n            while (index < dataBytes.length && dataBytes[index] != '\"') {\n                index++;\n            }\n            valueIndices[2 * valuesFound + 1] = index;\n            valuesFound++;\n        }\n\n        string[] memory values = new string[](valuesFound);\n        for (uint i = 0; i < valuesFound; i++) {\n            startIndex = valueIndices[2 * i];\n            endIndex = valueIndices[2 * i + 1];\n            bytes memory contextValue = new bytes(endIndex - startIndex);\n            for (uint j = startIndex; j < endIndex; j++) {\n                contextValue[j - startIndex] = dataBytes[j];\n            }\n            values[i] = string(contextValue);\n        }\n        return values;\n    }\n}\n"
    },
    "src/lib/DateParsing.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { DateTime } from \"../external/DateTime.sol\";\nimport { StringConversionUtils } from \"./StringConversionUtils.sol\";\n\npragma solidity ^0.8.18;\n\nlibrary DateParsing {\n\n    using StringConversionUtils for string;\n\n    /**\n     * @notice Iterates through every character in the date string and splits the string at each dash, \"T\", space, or colon. Function will revert\n     * if there are not 6 substrings formed from the split. The substrings are then converted to uints and passed to the DateTime lib\n     * to get the unix timestamp. This function supports DATE FORMATS: YYYY-MM-DDTHH:MM:SS, YYYY-MM-DDTHH:MM:SS.SSSZ, or YYYY-MM-DD HH:MM:SS,\n     * not suitable for use with other date formats. It skips the milliseconds and timezone offset, as they are not present in all date strings.\n     * It returns UTC timestamps.\n     *\n     * @param _dateString       Date string to be converted to a UTC timestamp (e.g., \"2025-06-17 22:08:30\")\n     */\n    function _dateStringToTimestamp(string memory _dateString) internal pure returns (uint256 utcTimestamp) {\n        string[6] memory extractedStrings;\n        uint256 breakCounter;\n        uint256 lastBreak;\n        uint256 lastIndex = bytes(_dateString).length;\n        for (uint256 i = 0; i < lastIndex; i++) {\n            if (\n                bytes(_dateString)[i] == 0x2d       // dash (-)\n                || bytes(_dateString)[i] == 0x3a    // colon (:)\n                || bytes(_dateString)[i] == 0x54    // T\n                || bytes(_dateString)[i] == 0x20    // space\n            ) {\n                extractedStrings[breakCounter] = _dateString.substring(lastBreak, i);\n                lastBreak = i + 1;\n                breakCounter++;\n            }\n\n            if (bytes(_dateString)[i] == 0x2e) {    // dot (.)\n                lastIndex = i;\n                break;\n            }\n        }\n        // Add last substring to array\n        extractedStrings[breakCounter] = _dateString.substring(lastBreak, lastIndex);\n\n        // Check that exactly 6 substrings were found (string is split at 5 different places)\n        require(breakCounter == 5, \"Invalid date string\");\n\n        utcTimestamp = DateTime.timestampFromDateTime(\n            extractedStrings[0].stringToUint(0),    // year\n            extractedStrings[1].stringToUint(0),    // month\n            extractedStrings[2].stringToUint(0),    // day\n            extractedStrings[3].stringToUint(0),    // hour\n            extractedStrings[4].stringToUint(0),    // minute\n            extractedStrings[5].stringToUint(0)     // second\n        );\n    }\n}\n"
    },
    "src/lib/StringConversionUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\n// Building on zk-email's StringUtils library we add the ability to handle decimals when\n// converting from string to Uint\nlibrary StringConversionUtils {\n    \n    /**\n     * @notice Function that parses numbers returned as strings including floating point numbers. Returned floating point\n     * numbers are to have the desired amount of decimal specified. If the stringified version of the floating point\n     * number has more decimal places than desired then the function will revert in order to be maximally safe. If\n     * the returned number has multiple floating points then the function will revert.\n     *\n     * Examples: _s = \"12.34\", _expectedDecimals = 6 => 12340000\n     *           _s = \"12.34\", _expectedDecimals = 2 => 1234\n     *           _s = \"12.34\", _expectedDecimals = 1 => REVERT (we never want loss of precision only addition)\n     *           _s = \"12.34.56\", _expectedDecimals = 6 => REVERT (Invalid number)\n     *\n     * @param _s                    String being processed\n     * @param _desiredDecimals      Desired amount of decimal places\n     */\n    function stringToUint(string memory _s, uint256 _desiredDecimals) internal pure returns (uint256) {\n        return stringToUint(_s, 0x2E, _desiredDecimals);\n    }\n\n    function stringToUint(\n        string memory _s,\n        bytes1 _decimalCharacter,\n        uint256 _desiredDecimals\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        bytes memory b = bytes(_s);\n\n        uint256 result = 0;\n        uint256 decimalPlaces = 0;\n\n        bool decimals = false;\n        for (uint256 i = 0; i < b.length; i++) {\n            if (b[i] >= 0x30 && b[i] <= 0x39) {\n                result = result * 10 + (uint256(uint8(b[i])) - 48);\n            }\n\n            if (decimals) {\n                decimalPlaces++;\n            }\n\n            if (b[i] == _decimalCharacter) {\n                require(decimals == false, \"String has multiple decimals\");\n                decimals = true;\n            }\n        }\n\n        require(decimalPlaces <= _desiredDecimals, \"String has too many decimal places\");\n        return result * (10 ** (_desiredDecimals - decimalPlaces));\n    }\n\n    /**\n     * @notice Function that returns a substring from _startIndex to _endIndex (non-inclusive).\n     *\n     * @param _str           String being processed\n     * @param _startIndex    Index to start parsing from\n     * @param _endIndex      Index to stop parsing at (index not included in result)\n     */\n    function substring(string memory _str, uint _startIndex, uint _endIndex) internal pure returns (string memory ) {\n        bytes memory strBytes = bytes(_str);\n        bytes memory result = new bytes(_endIndex-_startIndex);\n        for(uint i = _startIndex; i < _endIndex; i++) {\n            result[i-_startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    function stringComparison(string memory _a, string memory _b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b)));\n    }\n}\n"
    },
    "src/MockUSDT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.30;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ERC20Burnable} from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MockUSDT is ERC20, Ownable, ERC20Burnable {\n    constructor(address _owner) ERC20(\"Mock USDT\", \"USDT\") Ownable(_owner) {\n        // Initial supply of 100,000 USDT with 6 decimals\n        _mint(_owner, 100_000 * 10 ** 6);\n    }\n\n    // Override decimals to return 6 instead of the default 18\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n\n    // Custom mint function for testing\n    function mint(address to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n    }\n}\n"
    },
    "src/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.30;\n\ninterface IERC20 {\n    function transfer(address to, uint256 amount) external returns (bool);\n}\n\ncontract Vault {\n    address public immutable usdt;\n    address public notary;\n\n    uint256 public constant MAX_ALLOWED_AMOUNT = 10 * 1e6; // 10 USDT (6 decimals)\n\n    struct Enrollment {\n        string from_binance_id;\n        address recipient;\n        uint256 amount;\n        bool claimed;\n    }\n\n    mapping(bytes32 => Enrollment) public enrollments;\n    mapping(address => bytes32) public recipientToEnrollId;\n\n    bytes32[] public enrolledIds;\n\n    event Enrolled(string from_binance_id, address recipient, uint256 amount);\n    event Claimed(bytes32 enrollId, uint256 amount);\n    event Debug(string message, address value);\n    event DebugBytes32(string message, bytes32 value);\n\n    constructor(address _usdt, address _notary) {\n        usdt = _usdt;\n        notary = _notary;\n    }\n\n    modifier withinLimit(uint256 amount) {\n        require(amount <= MAX_ALLOWED_AMOUNT, \"Amount exceeds 10 USDT limit\");\n        _;\n    }\n\n    function _createEnrollId(string memory from_binance_id, address recipient) internal view returns (bytes32) {\n        uint256 timestamp = block.timestamp;\n        bytes32 messageHash = keccak256(abi.encodePacked(from_binance_id, recipient, timestamp));\n        return messageHash;\n    }\n\n    function enroll(string memory from_binance_id, address recipient, uint256 amount) external withinLimit(amount) {\n        bytes32 enrollId = _createEnrollId(from_binance_id, recipient);\n        require(enrollments[enrollId].amount == 0, \"Already enrolled\");\n        enrollments[enrollId] =\n            Enrollment({from_binance_id: from_binance_id, recipient: recipient, amount: amount, claimed: false});\n        enrolledIds.push(enrollId);\n        recipientToEnrollId[recipient] = enrollId;\n        emit Enrolled(from_binance_id, recipient, amount);\n    }\n\n    // bytes32 messageHash = keccak256(abi.encodePacked(enrollId, amount));\n    // (uint8 v, bytes32 r, bytes32 s) = vm.sign(NOTARY_PRIVATE_KEY, messageHash);\n    function claim(bytes32 enrollId, uint256 amount, uint8 v, bytes32 r, bytes32 s) external {\n        Enrollment storage e = enrollments[enrollId];\n        require(e.amount > 0, \"Not enrolled\");\n        require(!e.claimed, \"Already claimed\");\n        require(e.amount == amount, \"Amount mismatch\");\n\n        bytes32 digest = keccak256(abi.encodePacked(enrollId, amount));\n        require(_isValidSignature(digest, v, r, s), \"Invalid signature\");\n\n        e.claimed = true;\n        delete recipientToEnrollId[e.recipient];\n\n        require(IERC20(usdt).transfer(e.recipient, e.amount), \"Transfer failed\");\n\n        emit Claimed(enrollId, amount);\n    }\n\n    function _isValidSignature(bytes32 digest, uint8 v, bytes32 r, bytes32 s) internal view returns (bool) {\n        address signer = ecrecover(digest, v, r, s);\n\n        return signer == notary;\n    }\n\n    function updateNotary(address newNotary) external {\n        require(msg.sender == notary, \"Only notary can update\");\n        notary = newNotary;\n    }\n\n    // for dev\n    function clearEnrollments() external {\n        require(msg.sender == notary, \"Only notary can clear\");\n        for (uint256 i = 0; i < enrolledIds.length; i++) {\n            address recipient = enrollments[enrolledIds[i]].recipient;\n            delete recipientToEnrollId[recipient];\n            delete enrollments[enrolledIds[i]];\n        }\n        delete enrolledIds;\n    }\n}\n"
    },
    "src/verifiers/BasePaymentVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.30;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Bytes32ArrayUtils } from \"../external/Bytes32ArrayUtils.sol\";\nimport { IBasePaymentVerifier } from \"./interfaces/IBasePaymentVerifier.sol\";\nimport { INullifierRegistry } from \"./nullifierRegistries/INullifierRegistry.sol\";\n\ncontract BasePaymentVerifier is Ownable, IBasePaymentVerifier {\n    using Bytes32ArrayUtils for bytes32[];\n\n    /* ============ State Variables ============ */\n    address public escrow;\n    INullifierRegistry public nullifierRegistry;\n    uint256 public timestampBuffer;\n\n    bytes32[] public currencies;\n    mapping(bytes32 => bool) public isCurrency;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies\n    ) Ownable(_owner) {\n        escrow = _escrow;\n        nullifierRegistry = _nullifierRegistry;\n        timestampBuffer = _timestampBuffer;\n\n        for (uint256 i = 0; i < _currencies.length; i++) {\n            currencies.push(_currencies[i]);\n            isCurrency[_currencies[i]] = true;\n        }\n    }\n\n    /* ============ External Functions ============ */\n    function addCurrency(bytes32 _currencyCode) external onlyOwner {\n        require(!isCurrency[_currencyCode], \"Currency already added\");\n\n        currencies.push(_currencyCode);\n        isCurrency[_currencyCode] = true;\n\n        emit CurrencyAdded(_currencyCode);\n    }\n\n    function removeCurrency(bytes32 _currencyCode) external onlyOwner {\n        require(isCurrency[_currencyCode], \"Currency not added\");\n\n        currencies.removeStorage(_currencyCode);\n        isCurrency[_currencyCode] = false;\n\n        emit CurrencyRemoved(_currencyCode);\n    }\n\n    function setTimestampBuffer(uint256 _timestampBuffer) external onlyOwner {\n        timestampBuffer = _timestampBuffer;\n        emit TimestampBufferSet(_timestampBuffer);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getCurrencies() external view returns (bytes32[] memory) {\n        return currencies;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateAndAddNullifier(bytes32 _nullifier) internal {\n        require(!nullifierRegistry.isNullified(_nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(_nullifier);\n    }\n}\n"
    },
    "src/verifiers/BaseReclaimPaymentVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.30;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { AddressArrayUtils } from \"../external/AddressArrayUtils.sol\";\nimport { Claims } from \"../external/Claims.sol\";\nimport { StringArrayUtils } from \"../external/StringArrayUtils.sol\";\nimport { BasePaymentVerifier } from \"./BasePaymentVerifier.sol\";\nimport { INullifierRegistry } from \"./nullifierRegistries/INullifierRegistry.sol\";\nimport { IReclaimVerifier } from \"./interfaces/IReclaimVerifier.sol\";\n\ncontract BaseReclaimPaymentVerifier is IReclaimVerifier, BasePaymentVerifier {\n    using AddressArrayUtils for address[];\n    using StringArrayUtils for string[];\n\n    /* ============ Constants ============ */\n    uint256 internal constant PRECISE_UNIT = 1e18;\n\n    /* ============ State Variables ============ */\n    mapping(string => bool) public isProviderHash;\n    string[] public providerHashes;                         // Set of provider hashes that these proofs should be for\n\n    /* ============ Events ============ */\n    event ProviderHashAdded(string providerHash);\n    event ProviderHashRemoved(string providerHash);\n\n    constructor(\n        address _owner,\n        address _ramp,\n        INullifierRegistry _nulliferRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies,\n        string[] memory _providerHashes\n    )\n        BasePaymentVerifier(\n            _owner,\n            _ramp,\n            _nulliferRegistry,\n            _timestampBuffer,\n            _currencies\n        )\n    {\n        for (uint256 i = 0; i < _providerHashes.length; i++) {\n            require(!isProviderHash[_providerHashes[i]], \"Provider hash already added\");\n            isProviderHash[_providerHashes[i]] = true;\n            providerHashes.push(_providerHashes[i]);\n\n            emit ProviderHashAdded(_providerHashes[i]);\n        }\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * ONLY OWNER: Add provider hash string. Provider hash must not have been previously added.\n     *\n     * @param _newProviderHash    New provider hash to be added\n     */\n    function addProviderHash(string memory _newProviderHash) external onlyOwner {\n        require(!isProviderHash[_newProviderHash], \"Provider hash already added\");\n\n        isProviderHash[_newProviderHash] = true;\n        providerHashes.push(_newProviderHash);\n\n        emit ProviderHashAdded(_newProviderHash);\n    }\n\n    /**\n     * ONLY OWNER: Remove provider hash string. Provider hash must have been previously added.\n     *\n     * @param _removeProviderHash    Provider hash to be removed\n     */\n    function removeProviderHash(string memory _removeProviderHash) external onlyOwner {\n        require(isProviderHash[_removeProviderHash], \"Provider hash not found\");\n\n        delete isProviderHash[_removeProviderHash];\n        providerHashes.removeStorage(_removeProviderHash);\n\n        emit ProviderHashRemoved(_removeProviderHash);\n    }\n\n    /* ============ Public Functions ============ */\n\n    /**\n     * @param proof                 Proof to be verified\n     * @param _witnesses            List of accepted witnesses\n     * @param _requiredThreshold    Minimum number of signatures required from accepted witnesses\n     */\n    function verifyProofSignatures(\n        ReclaimProof memory proof,\n        address[] memory _witnesses,\n        uint256 _requiredThreshold\n    ) public pure returns (bool) {\n        require(_requiredThreshold > 0, \"Required threshold must be greater than 0\");\n        require(_requiredThreshold <= _witnesses.length, \"Required threshold must be less than or equal to number of witnesses\");\n        require(proof.signedClaim.signatures.length > 0, \"No signatures\");\n\n        Claims.SignedClaim memory signed = Claims.SignedClaim(\n            proof.signedClaim.claim,\n            proof.signedClaim.signatures\n        );\n\n        bytes32 hashed = Claims.hashClaimInfo(proof.claimInfo);\n        require(proof.signedClaim.claim.identifier == hashed, \"ClaimInfo hash doesn't match\");\n        require(hashed != bytes32(0), \"ClaimInfo hash is zero\");\n\n        address[] memory claimSigners = Claims.recoverSignersOfSignedClaim(signed);\n        require(claimSigners.length >= _requiredThreshold, \"Fewer signatures than required threshold\");\n\n        address[] memory seenSigners = new address[](claimSigners.length);\n        uint256 validWitnessSignatures;\n\n        for (uint256 i = 0; i < claimSigners.length; i++) {\n            address currSigner = claimSigners[i];\n            if (seenSigners.contains(currSigner)) {\n                continue;\n            }\n\n            if (_witnesses.contains(currSigner)) {\n                seenSigners[validWitnessSignatures] = currSigner;\n                validWitnessSignatures++;\n            }\n        }\n\n        require(\n            validWitnessSignatures >= _requiredThreshold,\n            \"Fewer witness signatures than required threshold\"\n        );\n\n        return true;\n    }\n\n    /* ============ View Functions ============ */\n\n    function getProviderHashes() external view returns (string[] memory) {\n        return providerHashes;\n    }\n\n    /* ============ Internal Functions ============ */\n\n    function _validateProviderHash(string memory _providerHash) internal view returns (bool) {\n        return isProviderHash[_providerHash];\n    }\n\n    function _validateAndAddSigNullifier(bytes[] memory _sigArray) internal {\n        bytes32 nullifier = keccak256(abi.encode(_sigArray));\n        require(!nullifierRegistry.isNullified(nullifier), \"Nullifier has already been used\");\n        nullifierRegistry.addNullifier(nullifier);\n    }\n}\n"
    },
    "src/verifiers/interfaces/IBasePaymentVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.30;\n\ninterface IBasePaymentVerifier {\n    /* ============ Events ============ */\n    event CurrencyAdded(bytes32 indexed currencyCode);\n    event CurrencyRemoved(bytes32 indexed currencyCode);\n    event TimestampBufferSet(uint256 timestampBuffer);\n\n    /* ============ Functions ============ */\n    function getCurrencies() external view returns (bytes32[] memory);\n    function isCurrency(bytes32 _currencyCode) external view returns (bool);\n}\n"
    },
    "src/verifiers/interfaces/IPaymentVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.30;\n\nimport { IBasePaymentVerifier } from \"./IBasePaymentVerifier.sol\";\n\ninterface IPaymentVerifier is IBasePaymentVerifier {\n\n    /* ============ Structs ============ */\n\n    struct VerifyPaymentData {\n        bytes paymentProof;                     // Payment proof\n        address mintToken;                      // Address of mintable token\n        uint256 intentAmount;                   // Amount of deposit token that offchain payer wants to take\n        uint256 intentTimestamp;                // Timestamp at which intent was created. Offchain payment must be made after this timestamp.\n        string payeeDetails;                    // Payee details (hash of payee's payment platform ID OR just raw ID)\n        // bytes32 fiatCurrency;                   // Fiat currency the offchain payer paid in\n        uint256 conversionRate;                 // Conversion rate of deposit token to fiat currency\n        bytes data;                             // Additional data required for verification (e.g. attester address)\n    }\n\n    /* ============ External Functions ============ */\n\n    function verifyPayment(\n        VerifyPaymentData calldata _verifyPaymentData\n    )\n        external\n        returns(bool success, bytes32 intentHash);\n\n}\n"
    },
    "src/verifiers/interfaces/IPaymentVerifierV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.30;\n\nimport { IBasePaymentVerifier } from \"./IBasePaymentVerifier.sol\";\n\ninterface IPaymentVerifierV2 is IBasePaymentVerifier {\n\n    /* ============ Structs ============ */\n\n    struct VerifyPaymentData {\n        bytes paymentProof;                     // Payment proof\n        address depositToken;                   // Address of deposit token\n        uint256 intentAmount;                   // Amount of deposit token that offchain payer wants to take\n        uint256 intentTimestamp;                // Timestamp at which intent was created. Offchain payment must be made after this timestamp.\n        string payeeDetails;                    // Payee details (hash of payee's payment platform ID OR just raw ID)\n        bytes32 fiatCurrency;                   // Fiat currency the offchain payer paid in\n        uint256 conversionRate;                 // Conversion rate of deposit token to fiat currency\n        bytes data;                             // Additional data required for verification (e.g. attester address)\n    }\n\n    /* ============ External Functions ============ */\n\n    function verifyPayment(\n        VerifyPaymentData calldata _verifyPaymentData\n    )\n        external\n        returns(bool success, bytes32 intentHash);\n\n}\n"
    },
    "src/verifiers/interfaces/IReclaimVerifier.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Claims } from \"../../external/Claims.sol\";\n\npragma solidity ^0.8.18;\n\ninterface IReclaimVerifier {\n    \n    struct ReclaimProof {\n        Claims.ClaimInfo claimInfo;\n        Claims.SignedClaim signedClaim;\n        bool isAppclipProof;\n    }\n}\n"
    },
    "src/verifiers/nullifierRegistries/INullifierRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.30;\n\ninterface INullifierRegistry {\n    function isNullified(bytes32 _nullifier) external view returns (bool);\n    function addNullifier(bytes32 _nullifier) external;\n}\n"
    },
    "src/verifiers/nullifierRegistries/NullifierRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { AddressArrayUtils } from \"../../external/AddressArrayUtils.sol\";\nimport { INullifierRegistry } from \"./INullifierRegistry.sol\";\n\npragma solidity ^0.8.18;\n\ncontract NullifierRegistry is Ownable, INullifierRegistry {\n\n    using AddressArrayUtils for address[];\n\n    /* ============ Events ============ */\n    event NullifierAdded(bytes32 nullifier, address indexed writer);\n    event WriterAdded(address writer);\n    event WriterRemoved(address writer);\n\n    /* ============ Modifiers ============ */\n    modifier onlyWriter() {\n        require(isWriter[msg.sender], \"Only addresses with write permissions can call\");\n        _;\n    }\n\n    /* ============ State Variables ============ */\n    mapping(bytes32 => bool) public isNullified;\n    mapping(address => bool) public isWriter;\n    address[] public writers;\n\n    /* ============ Constructor ============ */\n    constructor(address _owner) Ownable(_owner) {}\n\n    /* ============ External Functions ============ */\n\n    /**\n     * ONLY WRITER: Only addresses with permission to write to this contract can call. Stores a nullifier for an email.\n     *\n     * @param _nullifier    The nullifier to store\n     */\n    function addNullifier(bytes32 _nullifier) external onlyWriter {\n        require(!isNullified[_nullifier], \"Nullifier already exists\");\n\n        isNullified[_nullifier] = true;\n\n        emit NullifierAdded(_nullifier, msg.sender);\n    }\n\n    /* ============ Admin Functions ============ */\n\n    /**\n     * ONLY OWNER: Add address that has write permissions to the registry. Writer must not have been previously added.\n     *\n     * @param _newWriter    The nullifier to store\n     */\n    function addWritePermission(address _newWriter) external onlyOwner {\n        require(!isWriter[_newWriter], \"Address is already a writer\");\n\n        isWriter[_newWriter] = true;\n        writers.push(_newWriter);\n\n        emit WriterAdded(_newWriter);\n    }\n\n    /**\n     * ONLY OWNER: Remove address that has write permissions to the registry. Writer must have been previously added.\n     *\n     * @param _removedWriter    The nullifier to store\n     */\n    function removeWritePermission(address _removedWriter) external onlyOwner {\n        require(isWriter[_removedWriter], \"Address is not a writer\");\n\n        isWriter[_removedWriter] = false;\n        writers.removeStorage(_removedWriter);\n\n        emit WriterRemoved(_removedWriter);\n    }\n\n    /* ============ External View Functions ============ */\n\n    function getWriters() external view returns(address[] memory) {\n       return writers;\n    }\n}\n"
    },
    "src/verifiers/TossBankReclaimVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.30;\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { DateParsing } from \"../lib/DateParsing.sol\";\nimport { ClaimVerifier } from \"../lib/ClaimVerifier.sol\";\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\nimport { Bytes32ConversionUtils } from \"../lib/Bytes32ConversionUtils.sol\";\n\nimport { BaseReclaimPaymentVerifier } from \"./BaseReclaimPaymentVerifier.sol\";\nimport { INullifierRegistry } from \"./nullifierRegistries/INullifierRegistry.sol\";\nimport { IPaymentVerifier } from \"./interfaces/IPaymentVerifier.sol\";\n\ncontract TossBankReclaimVerifier is IPaymentVerifier, BaseReclaimPaymentVerifier {\n\n    using StringConversionUtils for string;\n    using Bytes32ConversionUtils for bytes32;\n\n    /* ============ Structs ============ */\n\n    // Struct to hold the payment details extracted from the proof\n    struct PaymentDetails {\n        string amountString;\n        string dateString;\n        string senderNickname;\n        string recipientBankAccount;\n        string providerHash;\n    }\n\n    /* ============ Constants ============ */\n\n    // 11 extracted parameters + 1 providerHash\n    uint8 internal constant MAX_EXTRACT_VALUES = 12;\n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies,\n        string[] memory _providerHashes\n    )\n        BaseReclaimPaymentVerifier(\n            _owner,\n            _escrow,\n            _nullifierRegistry,\n            _timestampBuffer,\n            _currencies,\n            _providerHashes\n        )\n    { }\n\n    function verifyPayment(\n        VerifyPaymentData calldata _verifyPaymentData\n    )\n        external\n        override\n        returns (bool, bytes32)\n    {\n        require(msg.sender == escrow, \"Only escrow can call\");\n\n        (\n            PaymentDetails memory paymentDetails,\n            bool isAppclipProof\n        ) = _verifyProofAndExtractValues(_verifyPaymentData.paymentProof, _verifyPaymentData.data);\n\n        _verifyPaymentDetails(paymentDetails, _verifyPaymentData, isAppclipProof);\n\n        bytes32 nullifier = keccak256(\n            abi.encodePacked(paymentDetails.dateString, paymentDetails.senderNickname)\n        );\n        _validateAndAddNullifier(nullifier);\n\n        return (true, keccak256(abi.encode(paymentDetails.senderNickname)));\n    }\n\n    function _verifyProofAndExtractValues(bytes calldata _proof, bytes calldata _depositData)\n        internal\n        view\n        returns (PaymentDetails memory paymentDetails, bool isAppclipProof)\n    {\n        // Decode proof\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\n\n        // Extract verification data\n        address[] memory witnesses = _decodeDepositData(_depositData);\n\n        verifyProofSignatures(proof, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     // claim must have at least 1 signature from witnesses\n\n        // Extract public values\n        paymentDetails = _extractValues(proof);\n\n        // Check provider hash (Required for Reclaim proofs)\n        require(_validateProviderHash(paymentDetails.providerHash), \"No valid providerHash\");\n\n        isAppclipProof = proof.isAppclipProof;\n    }\n\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData,\n        bool _isAppclipProof\n    ) internal view {\n        uint256 expectedAmount = _verifyPaymentData.intentAmount * _verifyPaymentData.conversionRate / PRECISE_UNIT;\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.mintToken).decimals();\n\n        uint256 paymentAmount = paymentDetails.amountString.stringToUint(decimals);\n        require(paymentAmount >= expectedAmount, \"Incorrect payment amount\");\n\n        // Validate recipient\n        if (_isAppclipProof) {\n            bytes32 hashedRecipientId = keccak256(abi.encodePacked(paymentDetails.recipientBankAccount));\n            require(\n                hashedRecipientId.toHexString().stringComparison(_verifyPaymentData.payeeDetails),\n                \"Incorrect payment recipient\"\n            );\n        } else {\n            require(\n                paymentDetails.recipientBankAccount.stringComparison(_verifyPaymentData.payeeDetails),\n                \"Incorrect payment recipient\"\n            );\n        }\n\n        // Validate timestamp\n        uint256 paymentTimestamp = _adjustTimestamp(paymentDetails.dateString);\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n    }\n\n    /**\n     * Adjusts the timestamp to UTC+9 and adds the timestamp buffer to build flexibility for L2 timestamps.\n     * @param _dateString The date string to adjust.\n     * @return The adjusted timestamp.\n    */\n    function _adjustTimestamp(string memory _dateString) internal view returns (uint256) {\n        uint256 paymentTimestamp = DateParsing._dateStringToTimestamp(_dateString) + timestampBuffer;\n        paymentTimestamp = paymentTimestamp - 9 * 60 * 60; // UTC+9\n        return paymentTimestamp;\n    }\n\n    /**\n     * Extracts all values from the proof context.\n     *\n     * @param _proof The proof containing the context to extract values from.\n     */\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context,\n            MAX_EXTRACT_VALUES,\n            true\n        );\n\n        return PaymentDetails({\n            // values[0] is documentTitle\n            recipientBankAccount: values[1],\n            // values[2] is recipientName\n            senderNickname: values[3],\n            amountString: values[4],\n            dateString: values[5],\n            providerHash: values[6]\n        });\n    }\n}\n"
    },
    "src/verifiers/TossBankReclaimVerifierV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.30;\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { DateParsing } from \"../lib/DateParsing.sol\";\nimport { ClaimVerifier } from \"../lib/ClaimVerifier.sol\";\nimport { StringConversionUtils } from \"../lib/StringConversionUtils.sol\";\nimport { Bytes32ConversionUtils } from \"../lib/Bytes32ConversionUtils.sol\";\n\nimport { BaseReclaimPaymentVerifier } from \"./BaseReclaimPaymentVerifier.sol\";\nimport { INullifierRegistry } from \"./nullifierRegistries/INullifierRegistry.sol\";\nimport { IPaymentVerifierV2 } from \"./interfaces/IPaymentVerifierV2.sol\";\n\ncontract TossBankReclaimVerifierV2 is IPaymentVerifierV2, BaseReclaimPaymentVerifier {\n\n    using StringConversionUtils for string;\n    using Bytes32ConversionUtils for bytes32;\n\n    /* ============ State Variables ============ */\n\n    // Mapping to track authorized escrows\n    mapping(address => bool) public isEscrow;\n    // Array to store all escrows for enumeration\n    address[] public escrows;\n\n    /* ============ Events ============ */\n\n    event EscrowAdded(address indexed escrow);\n    event EscrowRemoved(address indexed escrow);\n\n    /* ============ Structs ============ */\n\n    // Struct to hold the payment details extracted from the proof\n    struct PaymentDetails {\n        string amountString;\n        string dateString;\n        string senderNickname;\n        string recipientBankAccount;\n        string providerHash;\n    }\n\n    /* ============ Constants ============ */\n\n    // 11 extracted parameters + 1 providerHash\n    uint8 internal constant MAX_EXTRACT_VALUES = 12;\n    uint8 internal constant MIN_WITNESS_SIGNATURE_REQUIRED = 1;\n    bytes32 internal constant KRW_CURRENCY = keccak256(\"KRW\");\n\n    /* ============ Constructor ============ */\n    constructor(\n        address _owner,\n        address _escrow,\n        INullifierRegistry _nullifierRegistry,\n        uint256 _timestampBuffer,\n        bytes32[] memory _currencies,\n        string[] memory _providerHashes\n    )\n        BaseReclaimPaymentVerifier(\n            _owner,\n            _escrow,\n            _nullifierRegistry,\n            _timestampBuffer,\n            _currencies,\n            _providerHashes\n        )\n    {\n        // Add initial escrow\n        isEscrow[_escrow] = true;\n        escrows.push(_escrow);\n        emit EscrowAdded(_escrow);\n    }\n\n    function verifyPayment(\n        VerifyPaymentData calldata _verifyPaymentData\n    )\n        external\n        override\n        returns (bool, bytes32)\n    {\n        require(isEscrow[msg.sender], \"Only escrows can call\");\n\n        (\n            PaymentDetails memory paymentDetails,\n            bool isAppclipProof\n        ) = _verifyProofAndExtractValues(_verifyPaymentData.paymentProof, _verifyPaymentData.data);\n\n        _verifyPaymentDetails(paymentDetails, _verifyPaymentData, isAppclipProof);\n\n        bytes32 nullifier = keccak256(\n            abi.encodePacked(paymentDetails.dateString, paymentDetails.senderNickname)\n        );\n        _validateAndAddNullifier(nullifier);\n\n        return (true, keccak256(abi.encode(paymentDetails.senderNickname)));\n    }\n\n    function _verifyProofAndExtractValues(bytes calldata _proof, bytes calldata _depositData)\n        internal\n        view\n        returns (PaymentDetails memory paymentDetails, bool isAppclipProof)\n    {\n        // Decode proof\n        ReclaimProof memory proof = abi.decode(_proof, (ReclaimProof));\n\n        // Extract verification data\n        address[] memory witnesses = _decodeDepositData(_depositData);\n\n        verifyProofSignatures(proof, witnesses, MIN_WITNESS_SIGNATURE_REQUIRED);     // claim must have at least 1 signature from witnesses\n\n        // Extract public values\n        paymentDetails = _extractValues(proof);\n\n        // Check provider hash (Required for Reclaim proofs)\n        require(_validateProviderHash(paymentDetails.providerHash), \"No valid providerHash\");\n\n        isAppclipProof = proof.isAppclipProof;\n    }\n\n    function _decodeDepositData(bytes calldata _data) internal pure returns (address[] memory witnesses) {\n        witnesses = abi.decode(_data, (address[]));\n    }\n\n    /**\n     * Verifies the payment details.\n     * @param paymentDetails The payment details extracted from the proof.\n     * @param _verifyPaymentData The verify payment data from the escrow.\n     * @param _isAppclipProof Whether the proof is an appclip proof.\n     */\n    function _verifyPaymentDetails(\n        PaymentDetails memory paymentDetails,\n        VerifyPaymentData memory _verifyPaymentData,\n        bool _isAppclipProof\n    ) internal view {\n        uint256 expectedAmount = _verifyPaymentData.intentAmount * _verifyPaymentData.conversionRate / PRECISE_UNIT;\n        uint8 decimals = IERC20Metadata(_verifyPaymentData.depositToken).decimals();\n\n        uint256 paymentAmount = paymentDetails.amountString.stringToUint(decimals);\n        require(paymentAmount >= expectedAmount, \"Incorrect payment amount\");\n\n        // Validate recipient\n        if (_isAppclipProof) {\n            bytes32 hashedRecipientId = keccak256(abi.encodePacked(paymentDetails.recipientBankAccount));\n            require(\n                hashedRecipientId.toHexString().stringComparison(_verifyPaymentData.payeeDetails),\n                \"Incorrect payment recipient\"\n            );\n        } else {\n            require(\n                paymentDetails.recipientBankAccount.stringComparison(_verifyPaymentData.payeeDetails),\n                \"Incorrect payment recipient\"\n            );\n        }\n\n        // Validate timestamp\n        uint256 paymentTimestamp = _adjustTimestamp(paymentDetails.dateString);\n        require(paymentTimestamp >= _verifyPaymentData.intentTimestamp, \"Incorrect payment timestamp\");\n\n        // Validate currency\n        require(_verifyPaymentData.fiatCurrency == KRW_CURRENCY, \"Incorrect payment currency\");\n    }\n\n    /**\n     * Adjusts the timestamp to UTC+9 and adds the timestamp buffer to build flexibility for L2 timestamps.\n     * @param _dateString The date string to adjust.\n     * @return The adjusted timestamp.\n    */\n    function _adjustTimestamp(string memory _dateString) internal view returns (uint256) {\n        uint256 paymentTimestamp = DateParsing._dateStringToTimestamp(_dateString) + timestampBuffer;\n        paymentTimestamp = paymentTimestamp - 9 * 60 * 60; // UTC+9\n        return paymentTimestamp;\n    }\n\n    /**\n     * Adds a new escrow address.\n     * @param _escrow The escrow address to add.\n     */\n    function addEscrow(address _escrow) external onlyOwner {\n        require(!isEscrow[_escrow], \"Already an escrow\");\n        require(_escrow != address(0), \"Invalid escrow address\");\n        \n        isEscrow[_escrow] = true;\n        escrows.push(_escrow);\n        \n        emit EscrowAdded(_escrow);\n    }\n\n    /**\n     * Removes an escrow address.\n     * @param _escrow The escrow address to remove.\n     */\n    function removeEscrow(address _escrow) external onlyOwner {\n        require(isEscrow[_escrow], \"Not an escrow\");\n        \n        isEscrow[_escrow] = false;\n        \n        // Remove from array\n        for (uint256 i = 0; i < escrows.length; i++) {\n            if (escrows[i] == _escrow) {\n                escrows[i] = escrows[escrows.length - 1];\n                escrows.pop();\n                break;\n            }\n        }\n        \n        emit EscrowRemoved(_escrow);\n    }\n\n    /**\n     * Returns all escrow addresses.\n     * @return The array of escrow addresses.\n     */\n    function getEscrows() external view returns (address[] memory) {\n        return escrows;\n    }\n\n    /**\n     * Extracts all values from the proof context.\n     *\n     * @param _proof The proof containing the context to extract values from.\n     */\n    function _extractValues(ReclaimProof memory _proof) internal pure returns (PaymentDetails memory paymentDetails) {\n        string[] memory values = ClaimVerifier.extractAllFromContext(\n            _proof.claimInfo.context,\n            MAX_EXTRACT_VALUES,\n            true\n        );\n\n        return PaymentDetails({\n            // values[0] is documentTitle\n            recipientBankAccount: values[1],\n            // values[2] is recipientName\n            senderNickname: values[3],\n            amountString: values[4],\n            dateString: values[5],\n            providerHash: values[6]\n        });\n    }\n}\n"
    },
    "src/ZkMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.30;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Pausable } from \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport { IPaymentVerifier } from \"./verifiers/interfaces/IPaymentVerifier.sol\";\nimport { IZkMinter } from \"./interfaces/IZkMinter.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IMintableERC20 } from \"./interfaces/IMintableERC20.sol\";\nimport { StringUtils } from \"./external/ReclaimStringUtils.sol\";\n\ncontract ZkMinter is Ownable, Pausable, IZkMinter {\n    address public token;\n    uint256 public intentCount;\n    uint256 public redeemCount;\n\n    // Mapping of address to intentHash (Only one intent per address at a given time)\n    mapping(address => uint256) public accountIntent;\n    mapping(uint256 => Intent) public intents;\n    address[] public verifiers;\n    mapping(address => DepositVerifierData) public depositVerifierData;\n\n    mapping(address => uint256) public accountRedeemRequest;\n    mapping(uint256 => RedeemRequest) public redeemRequests;\n\n    constructor(\n        address _owner,\n        address _token\n    ) Ownable(_owner) {\n        token = _token;\n    }\n\n    function signalIntent(\n        address _to,\n        uint256 _amount,\n        address _verifier\n    ) external whenNotPaused {\n        require(_to != address(0), \"Invalid recipient address\");\n        require(_amount > 0, InvalidAmount());\n        require(_verifier != address(0), \"Invalid verifier address\");\n\n        // Check if an intent already exists for this address\n        uint256 intentId = accountIntent[msg.sender];\n        require(intentId == 0, \"Intent already exists for this address\");\n\n        // Create a new intent\n        intentId = ++intentCount;\n        intents[intentId] = Intent({\n            owner: msg.sender,\n            to: _to,\n            amount: _amount,\n            timestamp: block.timestamp,\n            paymentVerifier: _verifier\n        });\n\n        accountIntent[msg.sender] = intentId;\n\n        emit IntentSignaled(_to, _verifier, _amount, intentId);\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Allowed even when paused.\n     *\n     * @param _intentId    ID of intent being cancelled\n     */\n    function cancelIntent(uint256 _intentId) external {\n        Intent memory intent = intents[_intentId];\n        require(intent.owner == msg.sender, \"Sender must be the intent owner\");\n        _pruneIntent(_intentId);\n        emit IntentCancelled(_intentId);\n    }\n\n    function fulfillIntent(\n        bytes calldata _paymentProof,\n        uint256 _intentId\n    ) external whenNotPaused {\n        Intent memory intent = intents[_intentId];\n\n        address verifier = intent.paymentVerifier;\n        require(verifier != address(0), IntentNotFound());\n\n        DepositVerifierData memory verifierData = depositVerifierData[verifier];\n        (bool success, bytes32 intentHash) = IPaymentVerifier(verifier).verifyPayment(\n            IPaymentVerifier.VerifyPaymentData({\n                paymentProof: _paymentProof,\n                mintToken: token,\n                intentAmount: intent.amount,\n                intentTimestamp: intent.timestamp,\n                payeeDetails: verifierData.payeeDetails,\n                conversionRate: 1e18, // PRECISE_UNIT is 1e18\n                data: verifierData.data\n            })\n        );\n        require(success, \"Payment verification failed\");\n        require(keccak256(abi.encode(StringUtils.uint2str(_intentId))) == intentHash, \"Intent hash mismatch\");\n\n        _pruneIntent(_intentId);\n\n        IMintableERC20(token).mint(intent.to, intent.amount);\n\n        emit IntentFulfilled(\n            intentHash,\n            verifier,\n            intent.owner,\n            intent.to,\n            intent.amount\n        );\n    }\n\n    function signalRedeem(\n        string calldata _accountNumber,\n        uint256 _amount\n    ) external whenNotPaused {\n        require(_amount > 0, InvalidAmount());\n        require(bytes(_accountNumber).length > 0, InvalidAccountNumber());\n        require(accountRedeemRequest[msg.sender] == 0, RedeemAlreadyExists());\n\n        // Transfer tokens from user to this contract for escrow\n        IERC20(token).transferFrom(msg.sender, address(this), _amount);\n\n        uint256 redeemId = ++redeemCount;\n        redeemRequests[redeemId] = RedeemRequest({\n            owner: msg.sender,\n            amount: _amount,\n            timestamp: block.timestamp\n        });\n\n        accountRedeemRequest[msg.sender] = redeemId;\n        emit RedeemRequestSignaled(redeemId, msg.sender, _amount, _accountNumber);\n    }\n\n    /**\n     * @notice Only callable by the originator of the intent. Allowed even when paused.\n     * @dev Returns escrowed tokens back to user\n     *\n     * @param _redeemId    ID of redeem request being cancelled\n     */\n    function cancelRedeem(uint256 _redeemId) external {\n        RedeemRequest memory redeemRequest = redeemRequests[_redeemId];\n        require(redeemRequest.owner == msg.sender, \"Sender must be the redeem request owner\");\n\n        _pruneRedeemRequest(_redeemId);\n\n        // memory redeeRequest is not deleted\n        IERC20(token).transfer(redeemRequest.owner, redeemRequest.amount);\n        emit RedeemRequestCancelled(_redeemId);\n    }\n\n    /**\n     * @notice Only callable by the owner. Allowed even when paused.\n     * @dev Burns escrowed tokens from this contract\n     *\n     * @param _redeemId    ID of redeem request being fulfilled\n     */\n    function fulfillRedeem(uint256 _redeemId) external onlyOwner {\n        RedeemRequest memory redeemRequest = redeemRequests[_redeemId];\n        require(redeemRequest.amount > 0, RedeemRequestNotFound());\n\n        IMintableERC20(token).burn(redeemRequest.amount);\n\n        _pruneRedeemRequest(_redeemId);\n        emit RedeemRequestFulfilled(_redeemId);\n    }\n\n    // *** Governance functions ***\n\n    function addVerifier(\n        address _verifier\n    ) external onlyOwner {\n        require(_verifier != address(0), \"Invalid verifier address\");\n        verifiers.push(_verifier);\n    }\n\n    function removeVerifier(\n        address _verifier\n    ) external onlyOwner {\n        require(_verifier != address(0), \"Invalid verifier address\");\n        require(verifiers.length > 0, \"No verifiers to remove\");\n\n        for (uint256 i = 0; i < verifiers.length; i++) {\n            if (verifiers[i] == _verifier) {\n                verifiers[i] = verifiers[verifiers.length - 1];\n                verifiers.pop();\n                break;\n            }\n        }\n    }\n\n    function setVerifierData(\n        address _verifier,\n        string calldata _payeeDetails,\n        bytes calldata _data\n    ) external onlyOwner {\n        require(_verifier != address(0), \"Invalid verifier address\");\n        depositVerifierData[_verifier] = DepositVerifierData({\n            payeeDetails: _payeeDetails,\n            data: _data\n        });\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function _pruneIntent(uint256 _intentId) internal {\n        delete accountIntent[intents[_intentId].owner];\n        delete intents[_intentId];\n    }\n\n    function _pruneRedeemRequest(uint256 _redeemId) internal {\n        delete accountRedeemRequest[redeemRequests[_redeemId].owner];\n        delete redeemRequests[_redeemId];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "evmVersion": "cancun",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}